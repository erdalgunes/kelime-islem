#!/bin/bash
# Project-specific pre-commit hook for Kelime ƒ∞≈ülem
# Fast validation of staged changes (<5 seconds)

set -eo pipefail

# Configuration
SKIP_CHECKS_FILE=".git/skip-checks"
MAX_COMPLEXITY_SCORE=15

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_skip() {
    local check_name=$1
    local reason=$2
    echo "$(date): Skipped $check_name - $reason" >> ".git/hooks-skip.log"
}

should_skip_check() {
    local check_name=$1
    if [ -f "$SKIP_CHECKS_FILE" ] && grep -q "^$check_name$" "$SKIP_CHECKS_FILE"; then
        echo -e "${YELLOW}‚è≠Ô∏è  Skipping $check_name (found in .git/skip-checks)${NC}"
        log_skip "$check_name" "user-specified in $SKIP_CHECKS_FILE"
        return 0
    fi
    return 1
}

# Validate skip-checks file format
validate_skip_checks() {
    if [ -f "$SKIP_CHECKS_FILE" ]; then
        local valid_checks="security platform kotlin-lint compose yaml workflows commit-msg file-size debug build"
        while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            if ! echo "$valid_checks" | grep -qw "$line"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Invalid check name in skip-checks: $line${NC}"
            fi
        done < "$SKIP_CHECKS_FILE"
    fi
}

echo -e "${YELLOW}üîç Running pre-commit checks...${NC}"

# Validate skip-checks configuration
validate_skip_checks

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    exit 0
fi

# Check for unsupported KMP targets
echo "  Checking for unsupported platforms..."
if git diff --cached | grep -E "testDesktopJvm|iosX64Test|iosSimulatorArm64Test|testIosX64" > /dev/null; then
    echo -e "${RED}‚ùå Error: Unsupported platform references found!${NC}"
    echo "  This project only supports Android and JS/Web targets."
    echo "  Remove references to Desktop or iOS tests."
    exit 1
fi

# Check workflow files for invalid tasks
if echo "$STAGED_FILES" | grep -q "\.github/workflows/.*\.yml"; then
    echo "  Validating workflow files..."

    # Check for non-existent Gradle tasks
    if git diff --cached | grep -E "gradlew (detekt|ktlintCheck)" > /dev/null; then
        echo -e "${RED}‚ùå Error: Invalid Gradle tasks in workflow!${NC}"
        echo "  - 'detekt' task doesn't exist (use 'lint' instead)"
        echo "  - 'ktlintCheck' task doesn't exist"
        exit 1
    fi

    # Validate YAML syntax
    if ! python3 -c "import yaml" >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  PyYAML not available; skipping YAML validation${NC}"
    else
      for file in $(echo "$STAGED_FILES" | grep "\.yml\|\.yaml"); do
          if [ -f "$file" ]; then
              if ! python3 -c "import yaml, sys; yaml.safe_load(sys.stdin)" < "$file" 2>/dev/null; then
                  echo -e "${RED}‚ùå Error: Invalid YAML syntax in $file${NC}"
                  exit 1
              fi
          fi
      done
    fi
fi

# Quick Kotlin formatting check on staged files only
KOTLIN_FILES=$(echo "$STAGED_FILES" | grep "\.kt$" || true)
if [ -n "$KOTLIN_FILES" ]; then
    echo "  Checking Kotlin formatting..."

    # Check for basic formatting issues
    for file in $KOTLIN_FILES; do
        if [ -f "$file" ]; then
            # Check for tabs (Kotlin style guide prefers spaces)
            if grep -q $'\t' "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found tabs in $file (use spaces)${NC}"
            fi

            # Check for trailing whitespace
            if grep -q "[[:space:]]$" "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Trailing whitespace in $file${NC}"
            fi

            # Check for complex Composable functions
            COMPLEX_COMPOSABLES=$({ grep -n "@Composable" "$file" || true; } | while read -r line; do
                line_num=$(echo "$line" | cut -d: -f1)
                # Extract function signature from @Composable line to opening brace
                func_line=$(sed -n "${line_num},/{/p" "$file" | tr '\n' ' ')
                # Extract parameter list from function signature
                params=$(echo "$func_line" | sed -n 's/^[^(]*(\([^)]*\)).*/\1/p')
                if [ -z "${params// }" ]; then
                    param_count=0
                else
                    # Trim optional trailing comma then count fields
                    param_count=$(awk -F',' '{gsub(/[[:space:]]+/,""); gsub(/,*$/,""); print ($0==""?0:NF)}' <<< "$params")
                fi
                if [ "$param_count" -gt "$MAX_COMPLEXITY_SCORE" ]; then
                    echo "$file:$line_num has $param_count parameters (consider refactoring)"
                fi
            done || true)
            if [ -n "$COMPLEX_COMPOSABLES" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Complex Composable functions found:${NC}"
                echo "$COMPLEX_COMPOSABLES"
            fi
        fi
    done
fi

# Check for debug/test code
if git diff --cached | grep -E "println\(|TODO\(|FIXME\(" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found debug statements or TODOs${NC}"
    echo "  Consider removing println() statements and addressing TODOs"
fi

# Check for large files
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ "$size" -gt 1000000 ]; then  # 1MB
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large file $file ($((size/1024))KB)${NC}"
        fi
    fi
done

# Optional quick build check
if [ "${QUICK_BUILD_CHECK:-}" = "true" ] && ! should_skip_check "build"; then
    echo "  Running quick build check..."
    if ! ./gradlew compileDebugKotlin --quiet; then
        echo -e "${RED}‚ùå Error: Build compilation failed${NC}"
        exit 1
    fi
fi

# Validate commit message format (basic check)
if [ -f ".git/COMMIT_EDITMSG" ]; then
    commit_msg=$(head -1 ".git/COMMIT_EDITMSG")
    if [ ${#commit_msg} -lt 10 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Commit message is very short${NC}"
    elif [ ${#commit_msg} -gt 72 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Commit message first line is too long (>72 chars)${NC}"
    fi
fi

echo -e "${GREEN}‚úÖ Pre-commit checks passed${NC}"
exit 0