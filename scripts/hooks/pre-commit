#!/bin/bash
# Project-specific pre-commit hook for Kelime ƒ∞≈ülem
# Fast validation of staged changes (<5 seconds)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîç Running pre-commit checks...${NC}"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    exit 0
fi

# Check for unsupported KMP targets
echo "  Checking for unsupported platforms..."
if git diff --cached | grep -E "testDesktopJvm|iosX64Test|iosSimulatorArm64Test|testIosX64" > /dev/null; then
    echo -e "${RED}‚ùå Error: Unsupported platform references found!${NC}"
    echo "  This project only supports Android and JS/Web targets."
    echo "  Remove references to Desktop or iOS tests."
    exit 1
fi

# Check workflow files for invalid tasks
if echo "$STAGED_FILES" | grep -q "\.github/workflows/.*\.yml"; then
    echo "  Validating workflow files..."

    # Check for non-existent Gradle tasks
    if git diff --cached | grep -E "gradlew (detekt|ktlintCheck)" > /dev/null; then
        echo -e "${RED}‚ùå Error: Invalid Gradle tasks in workflow!${NC}"
        echo "  - 'detekt' task doesn't exist (use 'lint' instead)"
        echo "  - 'ktlintCheck' task doesn't exist"
        exit 1
    fi

    # Validate YAML syntax
    for file in $(echo "$STAGED_FILES" | grep "\.yml\|\.yaml"); do
        if [ -f "$file" ]; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo -e "${RED}‚ùå Error: Invalid YAML syntax in $file${NC}"
                exit 1
            fi
        fi
    done
fi

# Quick Kotlin formatting check on staged files only
KOTLIN_FILES=$(echo "$STAGED_FILES" | grep "\.kt$" || true)
if [ -n "$KOTLIN_FILES" ]; then
    echo "  Checking Kotlin formatting..."

    # Check for basic formatting issues
    for file in $KOTLIN_FILES; do
        if [ -f "$file" ]; then
            # Check for tabs (Kotlin style guide prefers spaces)
            if grep -q $'\t' "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found tabs in $file (use spaces)${NC}"
            fi

            # Check for trailing whitespace
            if grep -q " $" "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Trailing whitespace in $file${NC}"
            fi
        fi
    done
fi

# Check for debug/test code
if git diff --cached | grep -E "println\(|TODO\(|FIXME\(" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found debug statements or TODOs${NC}"
    echo "  Consider removing println() statements and addressing TODOs"
fi

# Check for large files
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ $size -gt 1000000 ]; then  # 1MB
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large file $file ($(($size/1024))KB)${NC}"
        fi
    fi
done

echo -e "${GREEN}‚úÖ Pre-commit checks passed${NC}"
exit 0