#!/bin/bash
# Comprehensive pre-push hook for Kelime ƒ∞≈ülem
# Full CI simulation before push to catch all failures

set -eo pipefail

# Configuration
PARALLEL_JOBS=4
CACHE_DIR=".git/hooks-cache"
SKIP_CHECKS_FILE=".git/skip-checks"
TASK_TIMEOUT=${TASK_TIMEOUT:-60}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Running pre-push CI validation...${NC}"

# Function to check if a Gradle task exists
check_gradle_task() {
    local task=$1
    local cache_file="$CACHE_DIR/gradle-tasks.txt"

    # Create cache directory if it doesn't exist
    mkdir -p "$CACHE_DIR"

    # Update cache if it doesn't exist or is older than 1 hour
    if [ ! -f "$cache_file" ] || [ "$(find "$cache_file" -mmin +60 2>/dev/null | wc -l)" -gt 0 ]; then
        ./gradlew tasks --all 2>/dev/null | awk '/^([a-zA-Z:_-]+)[[:space:]]+-/{print $1}' > "$cache_file" || : > "$cache_file"
    fi

    grep -qx "$task" "$cache_file"
}

# Parallel task execution helper
run_parallel() {
    local -a tasks=("$@")
    local -a pids=()

    for i in "${!tasks[@]}"; do
        local timeout=${TASK_TIMEOUT:-60}  # seconds per task
        {
            timeout "$timeout" bash -c "${tasks[$i]}"
        } &
        pids+=($!)
    done

    # Wait for all tasks to complete
    local failed=0
    for pid in "${pids[@]}"; do
        if ! wait "$pid"; then
            failed=1
        fi
    done

    return "$failed"
}

# 1. Validate workflow YAML syntax
echo -e "${YELLOW}üìù Validating workflow YAML syntax...${NC}"
if ! python3 -c "import yaml" >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  PyYAML not available; skipping workflow YAML validation${NC}"
else
  for workflow in .github/workflows/*.yml; do
      if [ -f "$workflow" ]; then
          if ! python3 -c "import yaml; yaml.safe_load(open('$workflow'))" 2>/dev/null; then
              echo -e "${RED}‚ùå Invalid YAML in $workflow${NC}"
              exit 1
          fi
      fi
  done
fi

# 2. Validate GitHub Action versions (if script exists)
if [ -f scripts/validate-action-versions.sh ]; then
    echo -e "${YELLOW}üîñ Checking GitHub Action versions...${NC}"
    if ! ./scripts/validate-action-versions.sh; then
        echo -e "${RED}‚ùå GitHub Action version validation failed!${NC}"
        exit 1
    fi
fi

# 3. Extract and validate all Gradle tasks from workflows
echo -e "${YELLOW}üî® Validating Gradle tasks in workflows...${NC}"
WORKFLOW_TASKS=$(
  grep -h "gradlew" .github/workflows/*.yml 2>/dev/null | \
  sed -n 's/.*gradlew[[:space:]]\+\(.*\)$/\1/p' | \
  tr ' ' '\n' | grep -E '^[a-zA-Z:_-]+$' | \
  grep -vE '^--?[^ ]+$' | \
  sort -u || true
)

INVALID_TASKS=""
for task in $WORKFLOW_TASKS; do
    # Skip flags and options
    if [[ "$task" == --* ]] || [[ "$task" == -* ]]; then
        continue
    fi

    echo -n "  Checking task: $task... "
    if check_gradle_task "$task" 2>/dev/null; then
        echo -e "${GREEN}‚úì${NC}"
    else
        echo -e "${RED}‚úó${NC}"
        INVALID_TASKS="$INVALID_TASKS $task"
    fi
done

if [ -n "$INVALID_TASKS" ]; then
    echo -e "${RED}‚ùå Invalid Gradle tasks found in workflows:${NC}"
    echo "  $INVALID_TASKS"
    echo "  Fix these in your workflow files before pushing!"
    exit 1
fi

# 4. Check for unsupported platform references
echo -e "${YELLOW}üéØ Checking for unsupported platforms...${NC}"
UNSUPPORTED_PATTERNS="testDesktopJvm|iosX64Test|iosSimulatorArm64Test|packageDistributionForCurrentOS"
if grep -rE "$UNSUPPORTED_PATTERNS" .github/workflows/ --include="*.yml" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Found references to unsupported platforms in workflows!${NC}"
    echo "  This project only supports Android and JS/Web."
    exit 1
fi

# 5. Run basic lint check
echo -e "${YELLOW}üîç Running lint check...${NC}"
if check_gradle_task "lint" 2>/dev/null; then
    if ! ./gradlew lint --continue > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Lint check had warnings (non-blocking)${NC}"
    fi
else
    echo -e "${YELLOW}  Skipping: lint task not available${NC}"
fi

# 6. Run quick tests (Android unit tests only for speed)
echo -e "${YELLOW}üß™ Running Android unit tests...${NC}"
if check_gradle_task ":composeApp:testDebugUnitTest" 2>/dev/null; then
    if ! ./gradlew :composeApp:testDebugUnitTest --continue > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Android unit tests failed!${NC}"
        echo "  Run './gradlew :composeApp:testDebugUnitTest' to see details"
        exit 1
    fi
else
    echo -e "${YELLOW}  Skipping: test task not available${NC}"
fi

# 7. Validate that required files exist
echo -e "${YELLOW}üìÅ Checking required files...${NC}"
REQUIRED_FILES=(
    ".github/workflows/kmp-ci.yml"
    "gradlew"
    "settings.gradle.kts"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Required file missing: $file${NC}"
        exit 1
    fi
done

# 8. Check for merge conflicts
if grep -r "^<<<<<<<\|^=======$\|^>>>>>>>" . --exclude-dir=.git > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Merge conflict markers found!${NC}"
    echo "  Resolve conflicts before pushing"
    exit 1
fi

# 9. Check commit messages (last 5 commits not in origin)
echo -e "${YELLOW}üí¨ Checking commit messages...${NC}"
COMMITS=$(git log "origin/$(git rev-parse --abbrev-ref HEAD)"..HEAD --oneline 2>/dev/null || git log -5 --oneline)
if echo "$COMMITS" | grep -E "^[a-f0-9]+ (WIP|wip|temp|TEMP)" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found WIP/temp commits${NC}"
fi

# Success!
echo -e "${GREEN}‚úÖ Pre-push validation passed!${NC}"
echo "  Your changes are ready to push to GitHub."
exit 0