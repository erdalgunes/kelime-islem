#!/bin/bash
# Comprehensive pre-push hook for Kelime ƒ∞≈ülem
# Full CI simulation before push to catch all failures

set -eo pipefail

# Configuration
PARALLEL_JOBS=4
CACHE_DIR=".git/hooks-cache"
SKIP_CHECKS_FILE=".git/skip-checks"
TASK_TIMEOUT=${TASK_TIMEOUT:-60}
CURRENT_TASK=0
TOTAL_TASKS=9

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Running pre-push CI validation...${NC}"

# Progress indicator
show_progress() {
    local task_name=$1
    ((CURRENT_TASK++))
    echo -e "${YELLOW}[$CURRENT_TASK/$TOTAL_TASKS] $task_name...${NC}"
}

# Validate skip-checks file format
validate_skip_checks() {
    if [ -f "$SKIP_CHECKS_FILE" ]; then
        local valid_checks="yaml-validation gradle-tasks platform-check lint-checks compilation unit-tests required-files commit-analysis"
        while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            if ! echo "$valid_checks" | grep -qw "$line"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Warning: Invalid check name in skip-checks: $line${NC}"
            fi
        done < "$SKIP_CHECKS_FILE"
    fi
}

validate_skip_checks

# Cache file for Gradle tasks
CACHE_FILE=".gradle/task-cache"

# Function to check if a Gradle task exists
check_gradle_task() {
    local task=$1
    # Normalize task name - remove leading colon for cache lookup
    local normalized_task="${task#:}"
    local task_pattern="^:*$normalized_task "
    
    # Use cache if available and fresh
    if [ -f "$CACHE_FILE" ] && is_cache_fresh; then
        if ! grep -q "$task_pattern" "$CACHE_FILE" 2>/dev/null; then
            echo -e "${RED}‚ùå Gradle task '$task' not found!${NC}" >&2
            return 1
        fi
    else
        # Fall back to direct query (use normalized task for consistency)
        if ! ./gradlew tasks --all 2>/dev/null | grep -q "$task_pattern"; then
            echo -e "${RED}‚ùå Gradle task '$task' not found!${NC}" >&2
            return 1
        fi
    fi

    grep -qx "$task" "$cache_file"
}

# Parallel task execution helper
run_parallel() {
    local -a tasks=("$@")
    local -a pids=()

    echo "  Starting ${#tasks[@]} parallel tasks..."
    for i in "${!tasks[@]}"; do
        {
            timeout "$TASK_TIMEOUT" bash -c "${tasks[$i]}"
        } &
        pids+=($!)
    done

    # Wait for all tasks to complete and track failures
    local failed_tasks=()
    for i in "${!pids[@]}"; do
        if ! wait "${pids[$i]}"; then
            failed_tasks+=("${tasks[$i]}")
        fi
    done

    if [ "${#failed_tasks[@]}" -gt 0 ]; then
        echo -e "${RED}‚ùå Failed tasks:${NC}"
        for task in "${failed_tasks[@]}"; do
            echo "  - $task"
        done
        return 1
    fi
    return 0
}

# 1. Validate workflow YAML syntax
show_progress "üìù Validating workflow YAML syntax"
if ! python3 -c "import yaml" >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  PyYAML not available; skipping workflow YAML validation${NC}"
else
  for workflow in .github/workflows/*.yml; do
      if [ -f "$workflow" ]; then
          if ! python3 -c "import yaml, sys; yaml.safe_load(sys.stdin)" < "$workflow" 2>/dev/null; then
              echo -e "${RED}‚ùå Invalid YAML in $workflow${NC}"
              exit 1
          fi
      fi
  done
fi

# 2. Validate GitHub Action versions (if script exists)
if [ -f scripts/validate-action-versions.sh ]; then
    show_progress "üîñ Checking GitHub Action versions"
    if ! ./scripts/validate-action-versions.sh; then
        echo -e "${RED}‚ùå GitHub Action version validation failed!${NC}"
        exit 1
    fi
fi

# 3. Check cache freshness (portable way)
is_cache_fresh() {
    # Clean up old cache files (older than 7 days)
    find "$(dirname "$CACHE_FILE")" -type f -name "task-cache*" -mtime +7 -delete 2>/dev/null || true

    python3 -c "
import os, sys, time
cache_file = '$CACHE_FILE'
if not os.path.exists(cache_file):
    sys.exit(1)
mtime = os.path.getmtime(cache_file)
now = time.time()
fresh = (now - mtime) < 3600
sys.exit(0 if fresh else 1)
" 2>/dev/null
}

# Refresh cache if needed
if ! is_cache_fresh; then
    show_progress "üîÑ Refreshing Gradle task cache"
    mkdir -p "$(dirname "$CACHE_FILE")"
    ./gradlew tasks --all > "$CACHE_FILE" 2>/dev/null || true
fi

# 4. Extract and validate all Gradle tasks from workflows
show_progress "üî® Validating Gradle tasks in workflows"

WORKFLOW_TASKS=$(
  grep -h "gradlew" .github/workflows/*.yml 2>/dev/null | \
  awk '/gradlew/ {for(i=1;i<=NF;i++) if($i=="gradlew" && $(i+1) !~ /^--?/) print $(i+1)}' | \
  grep -E '^[a-zA-Z:_-]+$' | \
  sort -u || true
)

INVALID_TASKS=""
for task in $WORKFLOW_TASKS; do
    # Skip flags and options
    if [[ "$task" == --* ]] || [[ "$task" == -* ]]; then
        continue
    fi

    echo -n "  Checking task: $task... "
    if check_gradle_task "$task" 2>/dev/null; then
        echo -e "${GREEN}‚úì${NC}"
    else
        echo -e "${RED}‚úó${NC}"
        INVALID_TASKS="$INVALID_TASKS $task"
    fi
done

if [ -n "$INVALID_TASKS" ]; then
    echo -e "${RED}‚ùå Invalid Gradle tasks found in workflows:${NC}"
    echo "  $INVALID_TASKS"
    echo "  Fix these in your workflow files before pushing!"
    exit 1
fi

# 5. Check for unsupported platform references
show_progress "üéØ Checking for unsupported platforms"
UNSUPPORTED_PATTERNS="testDesktopJvm|iosX64Test|iosSimulatorArm64Test|packageDistributionForCurrentOS"
if grep -rE "$UNSUPPORTED_PATTERNS" .github/workflows/ --include="*.yml" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Found references to unsupported platforms in workflows!${NC}"
    echo "  This project only supports Android and JS/Web."
    exit 1
fi

# 6. Run basic lint check
show_progress "üîç Running lint check"
if check_gradle_task "lint" 2>/dev/null; then
    if ! ./gradlew lint --continue > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Lint check had warnings (non-blocking)${NC}"
    fi
else
    echo -e "${YELLOW}  Skipping: lint task not available${NC}"
fi

# 7. Run quick tests (Android unit tests only for speed)
show_progress "üß™ Running Android unit tests"
if check_gradle_task ":composeApp:testDebugUnitTest" 2>/dev/null; then
    if ! ./gradlew :composeApp:testDebugUnitTest --continue > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Android unit tests failed!${NC}"
        echo "  Run './gradlew :composeApp:testDebugUnitTest' to see details"
        exit 1
    fi
else
    echo -e "${YELLOW}  Skipping: test task not available${NC}"
fi

# 8. Validate that required files exist
show_progress "üìÅ Checking required files"
REQUIRED_FILES=(
    ".github/workflows/kmp-ci.yml"
    "gradlew"
    "settings.gradle.kts"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Required file missing: $file${NC}"
        exit 1
    fi
done

# Check for merge conflicts (no progress update for quick check)
if grep -r "^<<<<<<<\|^=======$\|^>>>>>>>" . --exclude-dir=.git > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Merge conflict markers found!${NC}"
    echo "  Resolve conflicts before pushing"
    exit 1
fi

# 9. Check commit messages (last 5 commits not in origin)
show_progress "üí¨ Checking commit messages"
COMMITS=$(git log "origin/$(git rev-parse --abbrev-ref HEAD)"..HEAD --oneline 2>/dev/null || git log -5 --oneline)
if echo "$COMMITS" | grep -E "^[a-f0-9]+ (WIP|wip|temp|TEMP)" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found WIP/temp commits${NC}"
fi

# Success!
echo -e "${GREEN}‚úÖ Pre-push validation passed!${NC}"
echo "  Your changes are ready to push to GitHub."
exit 0