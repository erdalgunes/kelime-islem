name: PR Auto Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize]
  workflow_run:
    workflows: ["KMP CI/CD Pipeline"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

jobs:
  # ============================================
  # SIZE LABELING
  # ============================================
  size-labeler:
    name: Apply Size Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'

    steps:
      - name: Apply size labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });

            const additions = pr.data.additions;
            const deletions = pr.data.deletions;
            const total = additions + deletions;

            // Remove all size labels first
            const sizeLabels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];
            for (const label of sizeLabels) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pr_number,
                  name: label
                });
              } catch (e) {
                // Label doesn't exist on PR, that's ok
              }
            }

            // Apply appropriate size label
            let sizeLabel = 'size/XS';
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 100) {
              sizeLabel = 'size/S';
            } else if (total < 500) {
              sizeLabel = 'size/M';
            } else if (total < 1000) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr_number,
              labels: [sizeLabel]
            });

            console.log(`Applied label: ${sizeLabel} (${total} lines changed)`);

  # ============================================
  # PATH-BASED LABELING
  # ============================================
  path-labeler:
    name: Apply Path-Based Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply path-based labels
        uses: actions/labeler@v5
        with:
          configuration-path: .github/labeler.yml
          sync-labels: false

  # ============================================
  # REVIEW NEEDS LABELING
  # ============================================
  review-needs-labeler:
    name: Apply Review Need Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'

    steps:
      - name: Analyze PR and apply review labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;

            // Get changed files
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: pr_number
            });

            const labelsToAdd = new Set();

            // Check for architecture changes
            const archPatterns = ['/core/', '/domain/', '/infrastructure/', 'Application.kt'];
            if (files.data.some(f => archPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/architecture-review');
            }

            // Check for performance-critical changes
            const perfPatterns = ['PerformanceMonitor', 'Cache', 'Repository', 'Query', 'Index'];
            if (files.data.some(f => perfPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/performance-review');
            }

            // Check for security changes
            const secPatterns = ['/auth/', '/crypto/', 'Security', 'Token', 'Permission'];
            if (files.data.some(f => secPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/security-review');
            }

            // Check for database changes
            const dbPatterns = ['.sql', '/migrations/', 'Schema', 'Database'];
            if (files.data.some(f => dbPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/database-review');
            }

            // Check for KMP changes
            const kmpPatterns = ['/commonMain/', '/androidMain/', '/jsMain/', '/iosMain/'];
            if (files.data.some(f => kmpPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/kmp-review');
            }

            // Check for UI changes
            const uiPatterns = ['/ui/', 'Composable', 'Theme', 'Color', 'Style', '.xml'];
            if (files.data.some(f => uiPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/ui-review');
            }

            // Check for test changes
            const testPatterns = ['Test.kt', '/test/', 'Test.java', '.test.'];
            if (files.data.some(f => testPatterns.some(p => f.filename.includes(p)))) {
              labelsToAdd.add('needs/test-review');
            }

            // Apply labels
            if (labelsToAdd.size > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr_number,
                labels: Array.from(labelsToAdd)
              });
              console.log(`Applied review labels: ${Array.from(labelsToAdd).join(', ')}`);
            }

  # ============================================
  # CI STATUS LABELING
  # ============================================
  ci-status-labeler:
    name: Apply CI Status Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != null

    steps:
      - name: Get PR number from workflow run
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.payload.workflow_run.id;

            // Get the workflow run details
            const run = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id
            });

            // Extract PR number from head branch or commit message
            const branch = run.data.head_branch;
            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branch}`,
              state: 'open'
            });

            if (pulls.data.length > 0) {
              return pulls.data[0].number;
            }
            return null;

      - name: Apply CI status labels
        if: steps.get-pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = ${{ steps.get-pr.outputs.result }};
            const conclusion = context.payload.workflow_run.conclusion;

            if (conclusion === 'success') {
              // Add success status label
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr_number,
                labels: ['status/ci-passing']
              });

              // Check if all automated checks pass
              const checks = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: context.payload.workflow_run.head_sha
              });

              const allPass = checks.data.check_runs.every(
                check => check.conclusion === 'success' ||
                         check.conclusion === 'skipped' ||
                         check.conclusion === null
              );

              if (allPass) {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: pr_number,
                  labels: ['status/ready-for-human']
                });
              }
            }

  # ============================================
  # PRIORITY LABELING
  # ============================================
  priority-labeler:
    name: Apply Priority Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'

    steps:
      - name: Determine and apply priority
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const pr = context.payload.pull_request;

            // Remove all priority labels first
            const priorityLabels = ['priority/urgent', 'priority/normal', 'priority/low'];
            for (const label of priorityLabels) {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pr_number,
                  name: label
                });
              } catch (e) {
                // Label doesn't exist, that's ok
              }
            }

            // Determine priority based on various factors
            let priority = 'priority/normal';

            // Check for hotfix or urgent keywords
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            const urgentKeywords = ['hotfix', 'urgent', 'critical', 'breaking', 'security'];

            if (urgentKeywords.some(k => title.includes(k) || body.includes(k))) {
              priority = 'priority/urgent';
            }
            // Check if only docs or tests changed
            else {
              const files = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: pr_number
              });

              const allDocsOrTests = files.data.every(f =>
                f.filename.endsWith('.md') ||
                f.filename.includes('/docs/') ||
                f.filename.includes('Test.') ||
                f.filename.includes('/test/')
              );

              if (allDocsOrTests) {
                priority = 'priority/low';
              }
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr_number,
              labels: [priority]
            });

            console.log(`Applied priority: ${priority}`);