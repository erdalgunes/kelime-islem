name: Sprint Metrics

on:
  schedule:
    # Run every Friday at 4 PM UTC (end of sprint)
    - cron: '0 16 * * 5'
  workflow_dispatch:
    inputs:
      sprint_number:
        description: 'Sprint number to analyze'
        required: true
        type: string

jobs:
  collect-metrics:
    name: Collect Sprint Metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate sprint dates
        id: dates
        run: |
          # Project anchor date - all sprints calculated from this
          ANCHOR_DATE="2025-01-01"
          ANCHOR_TIMESTAMP=$(date -d "$ANCHOR_DATE" +%s)

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SPRINT="${{ github.event.inputs.sprint_number }}"
          else
            # Calculate current sprint based on today's date
            CURRENT_DATE=$(date +%s)
            DAYS_SINCE_ANCHOR=$(( ($CURRENT_DATE - $ANCHOR_TIMESTAMP) / 86400 ))
            SPRINT=$(( ($DAYS_SINCE_ANCHOR / 14) + 1 ))
          fi

          # Calculate sprint start and end dates based on sprint number
          # Sprint 1 starts on ANCHOR_DATE, Sprint 2 starts 14 days later, etc.
          SPRINT_START_DAYS=$(( ($SPRINT - 1) * 14 ))
          SPRINT_END_DAYS=$(( $SPRINT_START_DAYS + 13 ))

          # Calculate actual dates
          SPRINT_START_TIMESTAMP=$(( $ANCHOR_TIMESTAMP + ($SPRINT_START_DAYS * 86400) ))
          SPRINT_END_TIMESTAMP=$(( $ANCHOR_TIMESTAMP + ($SPRINT_END_DAYS * 86400) ))

          # Format dates for output
          START_DATE=$(date -d "@$SPRINT_START_TIMESTAMP" +%Y-%m-%d)
          END_DATE=$(date -d "@$SPRINT_END_TIMESTAMP" +%Y-%m-%d)

          echo "sprint_number=$SPRINT" >> $GITHUB_OUTPUT
          echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
          echo "end_date=$END_DATE" >> $GITHUB_OUTPUT

          echo "Sprint $SPRINT: $START_DATE to $END_DATE"

      - name: Collect issue metrics
        id: issues
        uses: actions/github-script@v7
        with:
          script: |
            const sprint = ${{ steps.dates.outputs.sprint_number }};
            const startDate = '${{ steps.dates.outputs.start_date }}';
            const endDate = '${{ steps.dates.outputs.end_date }}';

            // Get issues in current sprint
            const sprintLabel = `sprint/${sprint}`;
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: sprintLabel,
              state: 'all',
              per_page: 100
            });

            // Calculate metrics
            const metrics = {
              total: issues.length,
              completed: issues.filter(i => i.state === 'closed').length,
              inProgress: issues.filter(i => i.state === 'open' && i.assignee).length,
              notStarted: issues.filter(i => i.state === 'open' && !i.assignee).length,
              bugs: issues.filter(i => i.labels.some(l => l.name === 'bug')).length,
              features: issues.filter(i => i.labels.some(l => l.name === 'enhancement')).length,
            };

            // Calculate story points
            let totalPoints = 0;
            let completedPoints = 0;

            for (const issue of issues) {
              const sizeLabel = issue.labels.find(l => l.name.startsWith('size/'));
              let points = 0;

              if (sizeLabel) {
                const size = sizeLabel.name.replace('size/', '');
                points = {
                  'XS': 1,
                  'S': 2,
                  'M': 5,
                  'L': 8,
                  'XL': 13
                }[size] || 0;
              }

              totalPoints += points;
              if (issue.state === 'closed') {
                completedPoints += points;
              }
            }

            metrics.totalPoints = totalPoints;
            metrics.completedPoints = completedPoints;
            metrics.velocity = completedPoints;

            return metrics;

      - name: Collect PR metrics
        id: prs
        uses: actions/github-script@v7
        with:
          script: |
            const startDate = new Date('${{ steps.dates.outputs.start_date }}');
            const endDate = new Date('${{ steps.dates.outputs.end_date }}');

            const prs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });

            // Filter PRs within sprint dates
            const sprintPRs = prs.filter(pr => {
              const createdAt = new Date(pr.created_at);
              return createdAt >= startDate && createdAt <= endDate;
            });

            // Calculate metrics
            const prMetrics = {
              total: sprintPRs.length,
              merged: sprintPRs.filter(pr => pr.merged_at).length,
              closed: sprintPRs.filter(pr => pr.state === 'closed' && !pr.merged_at).length,
              open: sprintPRs.filter(pr => pr.state === 'open').length
            };

            // Calculate average review time
            let totalReviewTime = 0;
            let reviewedPRs = 0;

            for (const pr of sprintPRs.filter(pr => pr.merged_at)) {
              const created = new Date(pr.created_at);
              const merged = new Date(pr.merged_at);
              const reviewTime = (merged - created) / (1000 * 60 * 60); // hours
              totalReviewTime += reviewTime;
              reviewedPRs++;
            }

            prMetrics.avgReviewTime = reviewedPRs > 0
              ? (totalReviewTime / reviewedPRs).toFixed(1)
              : 0;

            return prMetrics;

      - name: Generate burndown data
        id: burndown
        uses: actions/github-script@v7
        with:
          script: |
            const sprint = ${{ steps.dates.outputs.sprint_number }};
            const startDate = new Date('${{ steps.dates.outputs.start_date }}');
            const endDate = new Date('${{ steps.dates.outputs.end_date }}');

            // Get all events for sprint issues
            const sprintLabel = `sprint/${sprint}`;
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: sprintLabel,
              state: 'all',
              per_page: 100
            });

            // Create daily burndown
            const burndown = [];
            const totalDays = 14;

            for (let day = 0; day <= totalDays; day++) {
              const date = new Date(startDate);
              date.setDate(date.getDate() + day);

              const openOnDay = issues.filter(issue => {
                const created = new Date(issue.created_at);
                const closed = issue.closed_at ? new Date(issue.closed_at) : null;

                return created <= date && (!closed || closed > date);
              }).length;

              burndown.push({
                day,
                date: date.toISOString().split('T')[0],
                remaining: openOnDay
              });
            }

            return burndown;

      - name: Create metrics report
        id: report
        run: |
          # Extract metrics values
          issues_completed=${{ fromJson(steps.issues.outputs.result).completed }}
          issues_total=${{ fromJson(steps.issues.outputs.result).total }}
          issues_in_progress=${{ fromJson(steps.issues.outputs.result).inProgress }}
          issues_not_started=${{ fromJson(steps.issues.outputs.result).notStarted }}

          points_completed=${{ fromJson(steps.issues.outputs.result).completedPoints }}
          points_total=${{ fromJson(steps.issues.outputs.result).totalPoints }}
          points_velocity=${{ fromJson(steps.issues.outputs.result).velocity }}

          bugs_count=${{ fromJson(steps.issues.outputs.result).bugs }}
          features_count=${{ fromJson(steps.issues.outputs.result).features }}

          prs_total=${{ fromJson(steps.prs.outputs.result).total }}
          prs_merged=${{ fromJson(steps.prs.outputs.result).merged }}
          prs_closed=${{ fromJson(steps.prs.outputs.result).closed }}
          prs_open=${{ fromJson(steps.prs.outputs.result).open }}
          prs_avg_review=${{ fromJson(steps.prs.outputs.result).avgReviewTime }}

          # Calculate percentages safely
          if [ "$issues_total" -eq 0 ]; then
            issues_pct="N/A"
          else
            issues_pct=$(( issues_completed * 100 / issues_total ))
            issues_pct="${issues_pct}%"
          fi

          if [ "$points_total" -eq 0 ]; then
            points_pct="N/A"
          else
            points_pct=$(( points_completed * 100 / points_total ))
            points_pct="${points_pct}%"
          fi

          # Export for use in heredoc
          export issues_completed issues_total issues_in_progress issues_not_started issues_pct
          export points_completed points_total points_velocity points_pct
          export bugs_count features_count
          export prs_total prs_merged prs_closed prs_open prs_avg_review

          cat > sprint-metrics.md << EOF
          # Sprint ${{ steps.dates.outputs.sprint_number }} Metrics Report

          **Period**: ${{ steps.dates.outputs.start_date }} to ${{ steps.dates.outputs.end_date }}

          ## 📊 Sprint Overview

          ### Issues
          - **Total Issues**: ${issues_total}
          - **Completed**: ${issues_completed}
          - **In Progress**: ${issues_in_progress}
          - **Not Started**: ${issues_not_started}

          ### Story Points
          - **Committed**: ${points_total} points
          - **Completed**: ${points_completed} points
          - **Velocity**: ${points_velocity} points

          ### Issue Types
          - **Bugs**: ${bugs_count}
          - **Features**: ${features_count}

          ## 🔄 Pull Requests

          - **Total PRs**: ${prs_total}
          - **Merged**: ${prs_merged}
          - **Closed (not merged)**: ${prs_closed}
          - **Still Open**: ${prs_open}
          - **Avg Review Time**: ${prs_avg_review} hours

          ## 📈 Completion Rate

          \`\`\`
          Issues: ${issues_completed}/${issues_total} (${issues_pct})
          Points: ${points_completed}/${points_total} (${points_pct})
          \`\`\`

          ## 🎯 Sprint Goals Achievement

          Review sprint goals in the planning discussion to assess achievement.

          ## 📝 Notes

          - This report is automatically generated
          - For detailed analysis, check GitHub Projects
          - Discuss these metrics in the sprint retrospective

          ---

          *Generated on $(date +"%Y-%m-%d %H:%M:%S UTC")*
          EOF

      - name: Post metrics to discussion
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('sprint-metrics.md', 'utf8');

            // Create a new discussion with the metrics
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              category_id: 'DIC_kwDONSXx4M4CjT5h', // Metrics category
              title: `Sprint ${{ steps.dates.outputs.sprint_number }} Metrics Report`,
              body: report
            });

      - name: Update project insights
        if: success()
        run: |
          echo "✅ Sprint metrics collected and posted successfully"
          echo "📊 Check the Discussions tab for the full report"

  velocity-trend:
    name: Calculate Velocity Trend
    runs-on: ubuntu-latest
    needs: collect-metrics
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate velocity trend
        id: trend
        uses: actions/github-script@v7
        with:
          script: |
            // Get last 5 sprints of data
            const discussions = await github.rest.discussions.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              category_slug: 'metrics'
            });

            // Extract velocity from previous reports
            const velocities = discussions.data
              .filter(d => d.title.includes('Sprint') && d.title.includes('Metrics'))
              .slice(0, 5)
              .map(d => {
                const match = d.body.match(/Velocity: (\d+) points/);
                return match ? parseInt(match[1]) : 0;
              });

            // Calculate trend
            const avgVelocity = velocities.reduce((a, b) => a + b, 0) / velocities.length;
            const trend = velocities[0] > avgVelocity ? 'increasing' : 'stable';

            console.log(`Average velocity: ${avgVelocity}`);
            console.log(`Trend: ${trend}`);

            return { avgVelocity, trend };

      - name: Update velocity badge
        if: success()
        run: |
          echo "📈 Velocity trend: ${{ fromJson(steps.trend.outputs.result).trend }}"
          echo "📊 Average velocity: ${{ fromJson(steps.trend.outputs.result).avgVelocity }} points"