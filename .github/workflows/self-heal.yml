name: Self-Healing CI/CD

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  detect-and-heal:
    name: Auto-Fix Issues
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.user.login, 'coderabbit')) ||
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'failure')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect issue type
        id: detect
        uses: actions/github-script@v7
        with:
          script: |
            let issueType = 'unknown';
            let context_data = {};

            if (context.eventName === 'workflow_run') {
              // CI failure
              const run = context.payload.workflow_run;
              issueType = 'ci-failure';
              context_data = {
                workflow: run.name,
                run_id: run.id,
                failure_url: run.html_url,
                branch: run.head_branch,
                commit: run.head_sha
              };
            } else if (context.eventName === 'issue_comment') {
              // CodeRabbit review
              const comment = context.payload.comment.body;
              if (comment.includes('bug') || comment.includes('error')) {
                issueType = 'bug';
              } else if (comment.includes('security')) {
                issueType = 'security';
              } else if (comment.includes('performance')) {
                issueType = 'performance';
              } else {
                issueType = 'suggestion';
              }
              context_data = {
                pr_number: context.payload.issue.number,
                comment_body: comment
              };
            } else if (context.eventName === 'check_suite') {
              issueType = 'check-failure';
              context_data = {
                check_suite_id: context.payload.check_suite.id,
                app: context.payload.check_suite.app.name
              };
            }

            core.setOutput('issue_type', issueType);
            core.setOutput('context', JSON.stringify(context_data));

      - name: Trigger Codegen.sh Agent
        if: steps.detect.outputs.issue_type != 'unknown'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          ISSUE_TYPE="${{ steps.detect.outputs.issue_type }}"
          CONTEXT='${{ steps.detect.outputs.context }}'

          # Create agent prompt based on issue type
          case "$ISSUE_TYPE" in
            "ci-failure")
              PROMPT="Fix the CI failure in workflow. Check logs, identify root cause, and implement fix."
              ;;
            "bug")
              PROMPT="Fix the bug identified by CodeRabbit. Analyze the issue, implement proper fix with tests."
              ;;
            "security")
              PROMPT="Fix the security vulnerability. Apply security best practices and add validation."
              ;;
            "performance")
              PROMPT="Optimize the performance issue. Profile, identify bottlenecks, and optimize."
              ;;
            "check-failure")
              PROMPT="Fix the failing check. Investigate failure reason and implement solution."
              ;;
            *)
              PROMPT="Implement the suggested improvement. Follow best practices."
              ;;
          esac

          # Trigger Codegen.sh with Claude Code agent
          cat > agent-request.json << EOF
          {
            "repository": "${{ github.repository }}",
            "issue_type": "$ISSUE_TYPE",
            "context": $CONTEXT,
            "prompt": "$PROMPT",
            "agent_config": {
              "model": "claude-4-0-sonnet-20250805",
              "tools": ["Read", "Edit", "Write", "Bash", "Grep", "WebSearch"],
              "auto_approve": false,
              "create_pr": true,
              "branch_prefix": "auto-fix"
            }
          }
          EOF

          # Send to Codegen.sh webhook (they'll spawn Claude Code agent)
          curl -X POST https://api.codegen.sh/v1/agents/spawn \
            -H "Authorization: Bearer ${{ secrets.CODEGEN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @agent-request.json || true

          echo "✅ Codegen.sh agent triggered for $ISSUE_TYPE"

      - name: Post status comment
        if: steps.detect.outputs.issue_type != 'unknown' && github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const issueType = '${{ steps.detect.outputs.issue_type }}';
            const emoji = {
              'bug': '🐛',
              'security': '🔒',
              'performance': '⚡',
              'suggestion': '💡',
              'ci-failure': '🔧'
            }[issueType] || '🤖';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `${emoji} **Self-healing activated**\n\nCodegen.sh is spawning a Claude Code agent to automatically fix this ${issueType}.\n\nThe agent will:\n1. Analyze the issue\n2. Implement a fix\n3. Create a PR with the solution\n4. Run validation checks\n\nYou'll be notified when the fix is ready for review.`
            });