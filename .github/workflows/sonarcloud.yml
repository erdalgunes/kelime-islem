name: SonarCloud Analysis

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'feature/**'
      - 'fix/**'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Cancel previous runs for the same branch
concurrency:
  group: sonarcloud-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: read  # Required for SonarCloud PR decoration

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    # Only run if SONAR_TOKEN is configured
    if: github.repository == 'erdalgunes/kelime-islem'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for accurate blame and new code detection

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        packages: 'platform-tools platforms;android-36 build-tools;34.0.0'

    - name: Setup Gradle with caching
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
        cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY || '' }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage for SonarCloud..."
        ./gradlew testDebugUnitTest koverXmlReport --stacktrace

    - name: Run Detekt for code quality
      run: |
        echo "Running Detekt analysis..."
        ./gradlew detekt --stacktrace

    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          echo "üîç Starting SonarCloud analysis..."

          # Set common parameters
          SONAR_PARAMS="-Dsonar.token=$SONAR_TOKEN"

          # Add PR-specific parameters if this is a pull request
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "üìã Analyzing pull request #${{ github.event.pull_request.number }}"
            SONAR_PARAMS="$SONAR_PARAMS \
              -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }} \
              -Dsonar.pullrequest.github.repository=${{ github.repository }} \
              -Dsonar.pullrequest.provider=github"
          else
            echo "üåø Analyzing branch: ${{ github.ref_name }}"
            SONAR_PARAMS="$SONAR_PARAMS \
              -Dsonar.branch.name=${{ github.ref_name }}"
          fi

          # Run SonarCloud analysis
          ./gradlew sonar $SONAR_PARAMS --info --stacktrace

          echo "‚úÖ SonarCloud analysis completed successfully"
          echo "üìä View results at: https://sonarcloud.io/project/overview?id=erdalgunes_kelime-islem"
        else
          echo "‚ö†Ô∏è SONAR_TOKEN not configured, skipping SonarCloud analysis"
          echo "üìù To enable SonarCloud:"
          echo "   1. Go to https://sonarcloud.io/projects/create"
          echo "   2. Import your GitHub repository"
          echo "   3. Generate a token at: https://sonarcloud.io/account/security"
          echo "   4. Add SONAR_TOKEN to repository secrets"
          exit 0
        fi

    - name: Comment PR with SonarCloud status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = context.payload.pull_request.number;
          const sonarProjectKey = 'erdalgunes_kelime-islem';
          const sonarUrl = `https://sonarcloud.io/dashboard?id=${sonarProjectKey}&pullRequest=${prNumber}`;

          const comment = `## üîç SonarCloud Analysis

          The code quality analysis has been completed.

          üìä [View detailed results on SonarCloud](${sonarUrl})

          ---
          <sub>üí° SonarCloud helps maintain code quality by detecting bugs, vulnerabilities, and code smells.</sub>`;

          // Check if we already commented
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('SonarCloud Analysis')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment,
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment,
            });
          }

    - name: Quality Gate Status
      if: github.event_name == 'pull_request'
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          echo "‚è≥ Waiting for SonarCloud Quality Gate result..."
          # The quality gate check is handled by the Gradle task with sonar.qualitygate.wait=true
          echo "‚úÖ Quality Gate evaluation complete"
        fi