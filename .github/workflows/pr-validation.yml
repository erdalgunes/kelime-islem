name: PR Validation & Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

concurrency:
  group: pr-validation-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # ============================================
  # SIZE AND PATH LABELING
  # ============================================
  label-pr:
    name: Apply PR Labels
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Size
        id: size
        run: |
          ADDITIONS=$(gh pr view ${{ github.event.pull_request.number }} --json additions -q '.additions')
          DELETIONS=$(gh pr view ${{ github.event.pull_request.number }} --json deletions -q '.deletions')
          TOTAL=$((ADDITIONS + DELETIONS))

          if [ $TOTAL -lt 30 ]; then
            echo "size=XS" >> $GITHUB_OUTPUT
            echo "size_label=size/XS" >> $GITHUB_OUTPUT
          elif [ $TOTAL -lt 100 ]; then
            echo "size=S" >> $GITHUB_OUTPUT
            echo "size_label=size/S" >> $GITHUB_OUTPUT
          elif [ $TOTAL -lt 300 ]; then
            echo "size=M" >> $GITHUB_OUTPUT
            echo "size_label=size/M" >> $GITHUB_OUTPUT
          elif [ $TOTAL -lt 1000 ]; then
            echo "size=L" >> $GITHUB_OUTPUT
            echo "size_label=size/L" >> $GITHUB_OUTPUT
          else
            echo "size=XL" >> $GITHUB_OUTPUT
            echo "size_label=size/XL" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Apply Size Label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ steps.size.outputs.size_label }}

      - name: Determine Path Labels
        id: paths
        run: |
          FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files -q '.files[].path')
          LABELS=""

          echo "$FILES" | while read -r file; do
            case "$file" in
              .github/workflows/*) LABELS="$LABELS,ci-cd" ;;
              composeApp/src/androidMain/*) LABELS="$LABELS,platform/android" ;;
              composeApp/src/iosMain/*) LABELS="$LABELS,platform/ios" ;;
              composeApp/src/desktopMain/*) LABELS="$LABELS,platform/desktop" ;;
              composeApp/src/wasmJsMain/*) LABELS="$LABELS,platform/web" ;;
              composeApp/src/commonMain/*) LABELS="$LABELS,shared" ;;
              *Test.kt|*test*) LABELS="$LABELS,tests" ;;
              docs/*|*.md) LABELS="$LABELS,documentation" ;;
              gradle*|*.gradle*) LABELS="$LABELS,build-config" ;;
            esac
          done

          echo "labels=${LABELS#,}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Apply Path Labels
        if: steps.paths.outputs.labels != ''
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ steps.paths.outputs.labels }}

      - name: Check Draft Status
        if: github.event.pull_request.draft
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: work-in-progress

  # ============================================
  # AI CODE REVIEW (CONSOLIDATED)
  # ============================================
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: CodeRabbit AI Review
        uses: coderabbitai/ai-pr-reviewer@latest
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          review_simple_changes: false
          review_comment_lgtm: false
          summarize: |
            Provide a concise summary of changes focusing on:
            - Architecture impacts
            - Performance implications
            - Security considerations
            - Testing coverage

            For Kotlin Multiplatform projects, check:
            - Platform-specific code isolation
            - Shared code compatibility
            - Build configuration changes
          system_prompt: |
            You are reviewing a Kotlin Multiplatform project.
            Focus on code quality, best practices, and potential issues.
            Be constructive and suggest specific improvements.
            Avoid nitpicking on style if the code is functional.

  # ============================================
  # BUILD VALIDATION
  # ============================================
  validate-build:
    name: Validate Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Quick Build Check
        run: |
          # For PRs, just validate the shared module compiles
          ./gradlew :composeApp:compileKotlinMetadata
          ./gradlew :composeApp:compileCommonMainKotlinMetadata

      - name: Run Detekt
        run: ./gradlew detekt

  # ============================================
  # PR COMMENT WITH SUMMARY
  # ============================================
  pr-summary:
    name: Post PR Summary
    runs-on: ubuntu-latest
    needs: [label-pr, validate-build]
    if: always() && (github.event_name == 'pull_request')

    steps:
      - name: Generate PR Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const pr = context.payload.pull_request;
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            const labelBadges = labels.data
              .map(l => `\`${l.name}\``)
              .join(' ');

            const body = `## PR Validation Summary

            **Labels:** ${labelBadges || 'None'}
            **Status:** ${context.job.status === 'success' ? '✅ Ready' : '⚠️ Needs Attention'}

            ### What's Next?
            ${pr.draft ? '- Convert from draft when ready for review' : '- Waiting for review'}
            ${labels.data.some(l => l.name.includes('size/XL')) ? '- Consider breaking into smaller PRs' : ''}

            ---
            <sub>Generated by PR Validation workflow</sub>`;

            // Find and update existing comment or create new
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            const botComment = comments.data.find(
              c => c.user.type === 'Bot' && c.body.includes('PR Validation Summary')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body
              });
            }