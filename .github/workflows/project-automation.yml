name: Project Automation

on:
  schedule:
    - cron: '0 9 * * 1-5' # Monday-Friday at 9 AM UTC for daily standup reminder
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled]
  pull_request:
    types: [opened, closed, ready_for_review, review_requested]
  issue_comment:
    types: [created]

jobs:
  add-to-project:
    name: Add to Project Board
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add issue to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/erdalgunes/projects/12
          github-token: ${{ secrets.GITHUB_TOKEN }}

  move-to-in-progress:
    name: Move to In Progress
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'assigned'
    steps:
      - name: Move issue to In Progress
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOADr0ls4BELXk';
            const itemId = '${{ github.event.issue.node_id }}';

            // First, add the issue to the project if not already added
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: itemId
            });

            // Get the project field for Status
            const projectData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = projectData.node.fields.nodes.find(f => f.name === 'Status');
            if (statusField) {
              const inProgressOption = statusField.options.find(o => o.name === 'ðŸ’» In Progress' || o.name === 'In Progress');
              if (inProgressOption) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optionId }
                      }
                    ) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId,
                  itemId: addResponse.addProjectV2ItemById.item.id,
                  fieldId: statusField.id,
                  optionId: inProgressOption.id
                });
              }
            }

  move-to-review:
    name: Move to Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'
    steps:
      - name: Get linked issues
        id: linked
        uses: actions/github-script@v7
        with:
          script: |
            const query = `
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    closingIssuesReferences(first: 10) {
                      nodes {
                        number
                        id
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: context.issue.number
            };

            const result = await github.graphql(query, variables);
            const issues = result.repository.pullRequest.closingIssuesReferences.nodes;
            return issues;

      - name: Move linked issues to Review
        if: steps.linked.outputs.result != '[]'
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOADr0ls4BELXk';
            const issues = ${{ steps.linked.outputs.result }};

            for (const issue of issues) {
              // Add issue to project and move to Review
              const addResponse = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item { id }
                  }
                }
              `, {
                projectId,
                contentId: issue.id
              });

              // Update status to In Review
              const projectData = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options { id, name }
                          }
                        }
                      }
                    }
                  }
                }
              `, { projectId });

              const statusField = projectData.node.fields.nodes.find(f => f.name === 'Status');
              if (statusField) {
                const reviewOption = statusField.options.find(o => o.name === 'ðŸ‘€ In Review' || o.name === 'In Review');
                if (reviewOption) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(
                        input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: { singleSelectOptionId: $optionId }
                        }
                      ) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId,
                    itemId: addResponse.addProjectV2ItemById.item.id,
                    fieldId: statusField.id,
                    optionId: reviewOption.id
                  });
                }
              }
            }

  move-to-done:
    name: Move to Done
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'closed') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged)
    steps:
      - name: Move to Done column
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOADr0ls4BELXk';
            const itemId = '${{ github.event.issue.node_id || github.event.pull_request.node_id }}';

            // Add to project and move to Done
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: itemId
            });

            // Update status to Done
            const projectData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id, name }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = projectData.node.fields.nodes.find(f => f.name === 'Status');
            if (statusField) {
              const doneOption = statusField.options.find(o => o.name === 'âœ… Done' || o.name === 'Done');
              if (doneOption) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optionId }
                      }
                    ) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId,
                  itemId: addResponse.addProjectV2ItemById.item.id,
                  fieldId: statusField.id,
                  optionId: doneOption.id
                });
              }
            }

  auto-assign-epic:
    name: Auto-assign to Epic
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'epic')
    steps:
      - name: Parse epic from issue body
        id: epic
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            const epicMatch = body.match(/Epic:\s*#(\d+)/i);
            return epicMatch ? epicMatch[1] : null;

      - name: Link to epic
        if: steps.epic.outputs.result != 'null' && steps.epic.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            // Check if comment already exists to avoid duplicates
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const epicNumber = ${{ steps.epic.outputs.result }};
            const linkText = `ðŸ”— Linked to Epic #${epicNumber}`;
            const alreadyLinked = comments.data.some(c => c.body.includes(linkText));

            if (!alreadyLinked) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: linkText
              });
            }

  update-sprint-field:
    name: Update Sprint Field
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'sprint/')
    steps:
      - name: Extract sprint number
        id: sprint
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          SPRINT=$(echo "$LABELS" | grep -o 'sprint/[0-9]*' | sed 's/sprint\///')
          echo "sprint_number=$SPRINT" >> $GITHUB_OUTPUT

      - name: Update project field
        if: steps.sprint.outputs.sprint_number
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOADr0ls4BELXk';
            const itemId = '${{ github.event.issue.node_id }}';
            const sprintNumber = '${{ steps.sprint.outputs.sprint_number }}';

            // Add to project
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: itemId
            });

            // Get Sprint field
            const projectData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const sprintField = projectData.node.fields.nodes.find(f => f.name === 'Sprint');
            if (sprintField) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { text: $value }
                    }
                  ) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId,
                itemId: addResponse.addProjectV2ItemById.item.id,
                fieldId: sprintField.id,
                value: sprintNumber
              });
            }

  calculate-story-points:
    name: Calculate Story Points
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'size/')
    steps:
      - name: Map size to points
        id: points
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          if echo "$LABELS" | grep -q "size/XS"; then
            echo "points=1" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/S"; then
            echo "points=2" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/M"; then
            echo "points=5" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/L"; then
            echo "points=8" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/XL"; then
            echo "points=13" >> $GITHUB_OUTPUT
          fi

      - name: Update story points field
        if: steps.points.outputs.points
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOADr0ls4BELXk';
            const itemId = '${{ github.event.issue.node_id }}';
            const points = '${{ steps.points.outputs.points }}';

            // Add to project
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: itemId
            });

            // Get Story Points field
            const projectData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const pointsField = projectData.node.fields.nodes.find(f => f.name === 'Story Points');
            if (pointsField) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { number: $value }
                    }
                  ) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId,
                itemId: addResponse.addProjectV2ItemById.item.id,
                fieldId: pointsField.id,
                value: parseFloat(points)
              });
            }

  daily-standup-reminder:
    name: Daily Standup Reminder
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Post standup reminder
        uses: actions/github-script@v7
        with:
          script: |
            const today = new Date().toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });

            try {
              // Query repository ID and discussion categories together
              const query = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    id
                    discussionCategories(first: 100) {
                      nodes {
                        id
                        name
                        slug
                      }
                    }
                  }
                }
              `;

              const result = await github.graphql(query, {
                owner: context.repo.owner,
                name: context.repo.repo
              });

              // Check if repository ID was returned
              if (!result.repository || !result.repository.id) {
                throw new Error('Could not retrieve repository ID from GraphQL');
              }

              const repositoryId = result.repository.id;
              const categories = result.repository.discussionCategories.nodes;

              // Try to find Daily Standups category, fall back to General or first available
              let category = categories.find(c =>
                c.name === 'Daily Standups' ||
                c.slug === 'daily-standups'
              );

              if (!category) {
                category = categories.find(c =>
                  c.name === 'General' ||
                  c.name === 'Announcements'
                ) || categories[0];
              }

              if (!category) {
                throw new Error('No discussion categories found');
              }

              // Create the standup discussion
              await github.graphql(`
                mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                  createDiscussion(input: {
                    repositoryId: $repositoryId,
                    categoryId: $categoryId,
                    title: $title,
                    body: $body
                  }) {
                    discussion {
                      id
                      url
                    }
                  }
                }
              `, {
                repositoryId: repositoryId,
                categoryId: category.id,
                title: `Daily Standup - ${today}`,
                body: `## Daily Standup - ${today}\n\nPlease share your updates:\n\n### Template\n\\\`\\\`\\\`markdown\n## @your-username\n\n### Yesterday\n- What you completed\n\n### Today\n- What you're working on\n\n### Blockers\n- Any impediments\n\\\`\\\`\\\`\n\nRemember to:\n- Be specific about issue numbers\n- Mention any PRs needing review\n- Flag blockers early\n- Tag team members if you need help`
              });

              console.log(`âœ… Daily standup posted to ${category.name} category`);
            } catch (error) {
              // Fall back to creating an issue if discussions not available
              console.log(`Could not post to discussions: ${error.message}`);

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Daily Standup - ${today}`,
                body: `## Daily Standup - ${today}\n\nPlease share your updates:\n\n### Template\n\`\`\`markdown\n## @your-username\n\n### Yesterday\n- What you completed\n\n### Today\n- What you're working on\n\n### Blockers\n- Any impediments\n\`\`\`\n\nRemember to:\n- Be specific about issue numbers\n- Mention any PRs needing review\n- Flag blockers early\n- Tag team members if you need help`,
                labels: ['standup', 'daily']
              });

              console.log('âœ… Daily standup posted as an issue');
            }