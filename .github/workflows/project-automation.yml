name: Project Automation

on:
  schedule:
    - cron: '0 9 * * 1-5' # Monday-Friday at 9 AM UTC for daily standup reminder
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled]
  pull_request:
    types: [opened, closed, ready_for_review, review_requested]
  issue_comment:
    types: [created]

jobs:
  add-to-project:
    name: Add to Project Board
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add issue to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/erdalgunes/projects/1
          github-token: ${{ secrets.GITHUB_TOKEN }}

  move-to-in-progress:
    name: Move to In Progress
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'assigned'
    steps:
      - name: Move issue to In Progress
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: "ðŸ’» In Progress"

  move-to-review:
    name: Move to Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'
    steps:
      - name: Get linked issues
        id: linked
        uses: actions/github-script@v7
        with:
          script: |
            const query = `
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    closingIssuesReferences(first: 10) {
                      nodes {
                        number
                        id
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: context.issue.number
            };

            const result = await github.graphql(query, variables);
            const issues = result.repository.pullRequest.closingIssuesReferences.nodes;
            return issues;

      - name: Move linked issues to Review
        if: steps.linked.outputs.result != '[]'
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ fromJson(steps.linked.outputs.result)[0].id }}
          status_value: "ðŸ‘€ In Review"

  move-to-done:
    name: Move to Done
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'closed') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged)
    steps:
      - name: Move to Done column
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id || github.event.pull_request.node_id }}
          status_value: "âœ… Done"

  auto-assign-epic:
    name: Auto-assign to Epic
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'epic')
    steps:
      - name: Parse epic from issue body
        id: epic
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            const epicMatch = body.match(/Epic:\s*#(\d+)/i);
            return epicMatch ? epicMatch[1] : null;

      - name: Link to epic
        if: steps.epic.outputs.result != 'null' && steps.epic.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            // Check if comment already exists to avoid duplicates
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const epicNumber = ${{ steps.epic.outputs.result }};
            const linkText = `ðŸ”— Linked to Epic #${epicNumber}`;
            const alreadyLinked = comments.data.some(c => c.body.includes(linkText));

            if (!alreadyLinked) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: linkText
              });
            }

  update-sprint-field:
    name: Update Sprint Field
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'sprint/')
    steps:
      - name: Extract sprint number
        id: sprint
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          SPRINT=$(echo "$LABELS" | grep -o 'sprint/[0-9]*' | sed 's/sprint\///')
          echo "sprint_number=$SPRINT" >> $GITHUB_OUTPUT

      - name: Update project field
        if: steps.sprint.outputs.sprint_number
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          field_name: "Sprint"
          field_value: ${{ steps.sprint.outputs.sprint_number }}

  calculate-story-points:
    name: Calculate Story Points
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'size/')
    steps:
      - name: Map size to points
        id: points
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          if echo "$LABELS" | grep -q "size/XS"; then
            echo "points=1" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/S"; then
            echo "points=2" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/M"; then
            echo "points=5" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/L"; then
            echo "points=8" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/XL"; then
            echo "points=13" >> $GITHUB_OUTPUT
          fi

      - name: Update story points field
        if: steps.points.outputs.points
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          field_name: "Story Points"
          field_value: ${{ steps.points.outputs.points }}

  daily-standup-reminder:
    name: Daily Standup Reminder
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Post standup reminder
        uses: actions/github-script@v7
        with:
          script: |
            const today = new Date().toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });

            try {
              // Dynamically resolve discussion category
              const query = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    discussionCategories(first: 100) {
                      nodes {
                        id
                        name
                        slug
                      }
                    }
                  }
                }
              `;

              const result = await github.graphql(query, {
                owner: context.repo.owner,
                name: context.repo.repo
              });

              const categories = result.repository.discussionCategories.nodes;

              // Try to find Daily Standups category, fall back to General or first available
              let category = categories.find(c =>
                c.name === 'Daily Standups' ||
                c.slug === 'daily-standups'
              );

              if (!category) {
                category = categories.find(c =>
                  c.name === 'General' ||
                  c.name === 'Announcements'
                ) || categories[0];
              }

              if (!category) {
                throw new Error('No discussion categories found');
              }

              // Create the standup discussion
              await github.graphql(`
                mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                  createDiscussion(input: {
                    repositoryId: $repositoryId,
                    categoryId: $categoryId,
                    title: $title,
                    body: $body
                  }) {
                    discussion {
                      id
                      url
                    }
                  }
                }
              `, {
                repositoryId: context.payload.repository.node_id,
                categoryId: category.id,
                title: `Daily Standup - ${today}`,
                body: `## Daily Standup - ${today}\n\nPlease share your updates:\n\n### Template\n\\\`\\\`\\\`markdown\n## @your-username\n\n### Yesterday\n- What you completed\n\n### Today\n- What you're working on\n\n### Blockers\n- Any impediments\n\\\`\\\`\\\`\n\nRemember to:\n- Be specific about issue numbers\n- Mention any PRs needing review\n- Flag blockers early\n- Tag team members if you need help`
              });

              console.log(`âœ… Daily standup posted to ${category.name} category`);
            } catch (error) {
              // Fall back to creating an issue if discussions not available
              console.log(`Could not post to discussions: ${error.message}`);

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Daily Standup - ${today}`,
                body: `## Daily Standup - ${today}\n\nPlease share your updates:\n\n### Template\n\`\`\`markdown\n## @your-username\n\n### Yesterday\n- What you completed\n\n### Today\n- What you're working on\n\n### Blockers\n- Any impediments\n\`\`\`\n\nRemember to:\n- Be specific about issue numbers\n- Mention any PRs needing review\n- Flag blockers early\n- Tag team members if you need help`,
                labels: ['standup', 'daily']
              });

              console.log('âœ… Daily standup posted as an issue');
            }