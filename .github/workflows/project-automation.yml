name: Project Automation

on:
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled]
  pull_request:
    types: [opened, closed, ready_for_review, review_requested]
  issue_comment:
    types: [created]

jobs:
  add-to-project:
    name: Add to Project Board
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add issue to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/erdalgunes/projects/1
          github-token: ${{ secrets.GITHUB_TOKEN }}

  move-to-in-progress:
    name: Move to In Progress
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'assigned'
    steps:
      - name: Move issue to In Progress
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: "ðŸ’» In Progress"

  move-to-review:
    name: Move to Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'
    steps:
      - name: Get linked issues
        id: linked
        uses: actions/github-script@v7
        with:
          script: |
            const query = `
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    closingIssuesReferences(first: 10) {
                      nodes {
                        number
                        id
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: context.issue.number
            };

            const result = await github.graphql(query, variables);
            const issues = result.repository.pullRequest.closingIssuesReferences.nodes;
            return issues;

      - name: Move linked issues to Review
        if: steps.linked.outputs.result != '[]'
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ fromJson(steps.linked.outputs.result)[0].id }}
          status_value: "ðŸ‘€ In Review"

  move-to-done:
    name: Move to Done
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'closed') ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged)
    steps:
      - name: Move to Done column
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id || github.event.pull_request.node_id }}
          status_value: "âœ… Done"

  auto-assign-epic:
    name: Auto-assign to Epic
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'epic')
    steps:
      - name: Parse epic from issue body
        id: epic
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            const epicMatch = body.match(/Epic:\s*#(\d+)/i);
            return epicMatch ? epicMatch[1] : null;

      - name: Link to epic
        if: steps.epic.outputs.result
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸ”— Linked to Epic #${{ steps.epic.outputs.result }}`
            });

  update-sprint-field:
    name: Update Sprint Field
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'sprint/')
    steps:
      - name: Extract sprint number
        id: sprint
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          SPRINT=$(echo "$LABELS" | grep -o 'sprint/[0-9]*' | sed 's/sprint\///')
          echo "sprint_number=$SPRINT" >> $GITHUB_OUTPUT

      - name: Update project field
        if: steps.sprint.outputs.sprint_number
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          field_name: "Sprint"
          field_value: ${{ steps.sprint.outputs.sprint_number }}

  calculate-story-points:
    name: Calculate Story Points
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'size/')
    steps:
      - name: Map size to points
        id: points
        run: |
          LABELS='${{ toJson(github.event.issue.labels.*.name) }}'
          if echo "$LABELS" | grep -q "size/XS"; then
            echo "points=1" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/S"; then
            echo "points=2" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/M"; then
            echo "points=5" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/L"; then
            echo "points=8" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "size/XL"; then
            echo "points=13" >> $GITHUB_OUTPUT
          fi

      - name: Update story points field
        if: steps.points.outputs.points
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          organization: erdalgunes
          project_id: 1
          resource_node_id: ${{ github.event.issue.node_id }}
          field_name: "Story Points"
          field_value: ${{ steps.points.outputs.points }}

  daily-standup-reminder:
    name: Daily Standup Reminder
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Post standup reminder
        uses: actions/github-script@v7
        with:
          script: |
            const today = new Date().toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });

            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              category_id: 'DIC_kwDONSXx4M4CjT5g', // Daily Standups category
              title: `Daily Standup - ${today}`,
              body: `## Daily Standup - ${today}

Please share your updates:

### Template
\`\`\`markdown
## @your-username

### Yesterday
- What you completed

### Today
- What you're working on

### Blockers
- Any impediments
\`\`\`

Remember to:
- Be specific about issue numbers
- Mention any PRs needing review
- Flag blockers early
- Tag team members if you need help`
            });

# Schedule this workflow to run daily at 9 AM
on:
  schedule:
    - cron: '0 9 * * 1-5' # Monday-Friday at 9 AM UTC
  # Also trigger on the events above
  issues:
    types: [opened, closed, reopened, assigned, unassigned, labeled]
  pull_request:
    types: [opened, closed, ready_for_review, review_requested]
  issue_comment:
    types: [created]