name: CodeRabbit Auto-Fix Agent

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  process-coderabbit:
    name: Process CodeRabbit Suggestions
    runs-on: ubuntu-latest
    if: |
      github.event.comment.user.login == 'coderabbitai' ||
      (github.event.comment.user.type == 'Bot' && contains(github.event.comment.body, 'coderabbitai'))

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse CodeRabbit suggestions
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const suggestions = [];

            // Parse markdown suggestion blocks
            const suggestionRegex = /```suggestion\n([\s\S]*?)```/g;
            let match;
            while ((match = suggestionRegex.exec(comment)) !== null) {
              suggestions.push({
                type: 'code_suggestion',
                content: match[1],
                line: extractLineFromContext(comment, match.index)
              });
            }

            // Parse improvement comments
            const improvementPatterns = [
              { pattern: /(?:Consider|Suggest|Should|Could)\s+(.+?)(?:\.|$)/gi, type: 'improvement' },
              { pattern: /(?:Bug|Issue|Problem):\s*(.+?)(?:\.|$)/gi, type: 'bug' },
              { pattern: /(?:Security|Vulnerability):\s*(.+?)(?:\.|$)/gi, type: 'security' },
              { pattern: /(?:Performance|Optimization):\s*(.+?)(?:\.|$)/gi, type: 'performance' },
              { pattern: /(?:Missing|Add|Include)\s+(?:test|coverage)(.+?)(?:\.|$)/gi, type: 'test' }
            ];

            for (const { pattern, type } of improvementPatterns) {
              let match;
              while ((match = pattern.exec(comment)) !== null) {
                suggestions.push({
                  type,
                  description: match[1].trim(),
                  context: getContext(comment, match.index)
                });
              }
            }

            function extractLineFromContext(text, position) {
              const before = text.substring(Math.max(0, position - 200), position);
              const lineMatch = before.match(/(?:line|L)\.?\s*(\d+)/i);
              return lineMatch ? parseInt(lineMatch[1]) : null;
            }

            function getContext(text, position, windowSize = 100) {
              return text.substring(
                Math.max(0, position - windowSize),
                Math.min(text.length, position + windowSize)
              );
            }

            core.setOutput('suggestions', JSON.stringify(suggestions));
            core.setOutput('count', suggestions.length);

            // Get PR details
            const pr = context.payload.issue || context.payload.pull_request;
            core.setOutput('pr_number', pr.number);

            console.log(`Found ${suggestions.length} suggestions from CodeRabbit`);
            return suggestions;

      - name: Dispatch fixes to Codegen.sh
        if: steps.parse.outputs.count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const suggestions = JSON.parse('${{ steps.parse.outputs.suggestions }}');
            const pr_number = '${{ steps.parse.outputs.pr_number }}';

            // Group suggestions by type
            const grouped = {};
            for (const suggestion of suggestions) {
              if (!grouped[suggestion.type]) grouped[suggestion.type] = [];
              grouped[suggestion.type].push(suggestion);
            }

            // Create a single comprehensive fix request
            const fixPrompt = `Fix CodeRabbit suggestions for PR #${pr_number}:\n\n`;

            for (const [type, items] of Object.entries(grouped)) {
              fixPrompt += `### ${type.replace('_', ' ').toUpperCase()}:\n`;
              items.forEach((item, i) => {
                if (item.content) {
                  fixPrompt += `${i + 1}. Apply code suggestion at line ${item.line || 'unknown'}:\n\`\`\`\n${item.content}\n\`\`\`\n`;
                } else {
                  fixPrompt += `${i + 1}. ${item.description}\n`;
                }
              });
              fixPrompt += `\n`;
            }

            // Send to Codegen.sh
            console.log('Dispatching to Codegen.sh...');

            const response = await fetch('https://api.codegen.sh/v1/agents/spawn', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${{ secrets.CODEGEN_API_KEY }}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                repository: '${{ github.repository }}',
                pr_number: pr_number,
                prompt: fixPrompt,
                context: {
                  comment_id: '${{ github.event.comment.id }}',
                  comment_url: '${{ github.event.comment.html_url }}'
                },
                agent_config: {
                  model: 'claude-4-0-sonnet-20250805',
                  tools: ['Read', 'Edit', 'MultiEdit', 'Grep', 'Bash'],
                  auto_commit: true,
                  commit_message: 'fix: Apply CodeRabbit suggestions',
                  target_branch: 'refs/pull/' + pr_number + '/head'
                }
              })
            });

            if (response.ok) {
              const data = await response.json();
              console.log(`âœ… Codegen.sh agent spawned: ${data.agent_id}`);

              // Post acknowledgment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(pr_number),
                body: `## ðŸ¤– CodeRabbit Suggestions Acknowledged\n\n` +
                      `I've detected **${suggestions.length} suggestions** from CodeRabbit and dispatched a Codegen.sh agent to implement them.\n\n` +
                      `### Processing:\n` +
                      Object.entries(grouped).map(([type, items]) =>
                        `- ${type}: ${items.length} ${items.length === 1 ? 'item' : 'items'}`
                      ).join('\n') +
                      `\n\n` +
                      `The fixes will be committed directly to this PR shortly.\n\n` +
                      `*Agent ID: ${data.agent_id}*`
              });
            } else {
              console.error('Failed to spawn Codegen.sh agent');
            }

      - name: React to CodeRabbit comment
        if: steps.parse.outputs.count > 0
        uses: actions/github-script@v7
        with:
          script: |
            // Add a reaction to show we're processing
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });