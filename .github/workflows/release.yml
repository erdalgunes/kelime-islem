name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

# Ensure only one release at a time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  # ============================================
  # QUALITY GATES
  # ============================================
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    # Only run on tags or workflow dispatch, not on PRs
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle with caching
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY || '' }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run all tests
      run: ./gradlew test

    - name: Verify coverage threshold
      run: |
        ./gradlew koverVerify || {
          echo "❌ Coverage is below required threshold!"
          echo "Please improve test coverage before releasing."
          exit 1
        }

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: SonarCloud Quality Gate
      if: secrets.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ============================================
  # BUILD RELEASE ARTIFACTS
  # ============================================
  build-release:
    name: Build Release Artifacts
    needs: quality-gates
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            task: :composeApp:assembleRelease
            artifact-name: android-release
            artifact-path: composeApp/build/outputs/apk/release/*.apk

          - platform: desktop
            os: ubuntu-latest
            task: :composeApp:packageReleaseDistributionForCurrentOS
            artifact-name: desktop-release-linux
            artifact-path: composeApp/build/compose/binaries/main/**/*

          - platform: desktop-mac
            os: macos-latest
            task: :composeApp:packageReleaseDistributionForCurrentOS
            artifact-name: desktop-release-macos
            artifact-path: composeApp/build/compose/binaries/main/**/*

          - platform: web
            os: ubuntu-latest
            task: :composeApp:jsBrowserDistribution
            artifact-name: web-release
            artifact-path: composeApp/build/dist/js/productionExecutable/**/*

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle with caching
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY || '' }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build ${{ matrix.platform }} release
      run: ./gradlew ${{ matrix.task }}

    - name: Sign Android APK
      if: matrix.platform == 'android' && secrets.KEYSTORE_BASE64
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          composeApp/build/outputs/apk/release/*.apk \
          "${{ secrets.KEY_ALIAS }}"
        rm keystore.jks

    - name: Upload ${{ matrix.platform }} artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-path }}
        retention-days: 7

  # ============================================
  # CREATE GITHUB RELEASE
  # ============================================
  create-release:
    name: Create GitHub Release
    needs: [quality-gates, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"* %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Contributors" >> CHANGELOG.md
        git log --pretty=format:"* @%an" $(git describe --tags --abbrev=0 HEAD^)..HEAD | sort -u >> CHANGELOG.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.quality-gates.outputs.version }}
        name: Release ${{ needs.quality-gates.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(needs.quality-gates.outputs.version, 'beta') || contains(needs.quality-gates.outputs.version, 'alpha') }}
        files: |
          release-artifacts/**/*.apk
          release-artifacts/**/*.dmg
          release-artifacts/**/*.deb
          release-artifacts/**/*.exe
          release-artifacts/**/*.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update documentation
      run: |
        echo "📦 New release: ${{ needs.quality-gates.outputs.version }}" >> release-notes.md
        echo "Download links will be available on the release page" >> release-notes.md

  # ============================================
  # DEPLOY TO STORES (Optional)
  # ============================================
  deploy-stores:
    name: Deploy to App Stores
    needs: create-release
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.quality-gates.outputs.version, 'beta') && !contains(needs.quality-gates.outputs.version, 'alpha') }}

    steps:
    - name: Deploy to Google Play
      if: secrets.PLAY_STORE_CREDENTIALS
      run: echo "Deploy to Google Play Store - implementation needed"

    - name: Deploy to Apple App Store
      if: secrets.APP_STORE_CREDENTIALS
      run: echo "Deploy to Apple App Store - implementation needed"

    - name: Deploy to Microsoft Store
      if: secrets.MICROSOFT_STORE_CREDENTIALS
      run: echo "Deploy to Microsoft Store - implementation needed"
