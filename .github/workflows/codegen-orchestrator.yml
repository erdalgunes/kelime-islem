name: Codegen Orchestrator

on:
  repository_dispatch:
    types: [codegen-fix]
  workflow_dispatch:
    inputs:
      issues:
        description: 'JSON array of issues to fix'
        required: true
        type: string
      pr_number:
        description: 'PR number to fix'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  orchestrate-fixes:
    name: Orchestrate Fix Generation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch_name || github.ref }}

      - name: Setup environment
        run: |
          # Install dependencies
          npm install -g @codegen/cli  # Placeholder - actual Codegen CLI

      - name: Parse and categorize issues
        id: categorize
        uses: actions/github-script@v7
        with:
          script: |
            const issues = ${{ github.event.client_payload.issues || github.event.inputs.issues }};

            // Categorize issues by type and severity
            const categorized = {
              critical: [],
              high: [],
              medium: [],
              low: []
            };

            issues.forEach(issue => {
              if (issue.type === 'security' || issue.type === 'bug') {
                categorized.critical.push(issue);
              } else if (issue.type === 'performance') {
                categorized.high.push(issue);
              } else if (issue.type === 'test') {
                categorized.medium.push(issue);
              } else {
                categorized.low.push(issue);
              }
            });

            core.setOutput('categorized', JSON.stringify(categorized));
            core.setOutput('has_critical', categorized.critical.length > 0);

      - name: Generate fixes with Claude via Codegen
        id: generate
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.client_payload.pr_number || github.event.inputs.pr_number }}
            ISSUES: ${{ steps.categorize.outputs.categorized }}

            Analyze the following issues and generate appropriate fixes:
            1. Review each issue carefully
            2. Generate minimal, targeted fixes
            3. Ensure fixes don't introduce new issues
            4. Follow existing code patterns and style
            5. Add tests for bug fixes

            For each issue, provide:
            - File path
            - Line numbers affected
            - Fixed code
            - Explanation of the fix
            - Test code if applicable

            Use the following specialized approaches:
            - Bug fixes: Root cause analysis, edge case handling
            - Security: OWASP guidelines, input validation
            - Performance: Algorithm optimization, caching
            - Style: Project conventions, linting rules
            - Tests: Coverage improvement, edge cases

          claude_args: |
            --model claude-4-0-sonnet-20250805
            --allowedTools Edit,Read,Write,Bash(npm test:*),Bash(npm run lint:*)

      - name: Apply generated fixes
        id: apply
        run: |
          # The Claude action should have already applied the fixes
          # Verify changes were made
          if git diff --quiet; then
            echo "No changes were made"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changes_made=true" >> $GITHUB_OUTPUT

            # List changed files
            git diff --name-only
          fi

      - name: Run safety validation
        if: steps.apply.outputs.changes_made == 'true'
        id: validate
        run: |
          # Run tests
          npm test 2>&1 | tee test-output.log || TEST_FAILED=1

          # Run linting
          npm run lint 2>&1 | tee lint-output.log || LINT_FAILED=1

          # Check for build errors
          npm run build 2>&1 | tee build-output.log || BUILD_FAILED=1

          # Aggregate results
          if [ "$TEST_FAILED" == "1" ] || [ "$LINT_FAILED" == "1" ] || [ "$BUILD_FAILED" == "1" ]; then
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "Validation failed"
          else
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "All validations passed"
          fi

      - name: Create fix commit
        if: steps.apply.outputs.changes_made == 'true' && steps.validate.outputs.validation_passed == 'true'
        run: |
          git config user.name "Codegen Bot"
          git config user.email "bot@codegen.com"

          # Stage all changes
          git add -A

          # Create detailed commit message
          cat > commit-msg.txt << 'EOF'
          fix: Auto-fix issues from CodeRabbit review

          Applied automated fixes for the following issues:
          ${{ steps.categorize.outputs.categorized }}

          All fixes have been validated with:
          - Unit tests passing
          - Linting checks passing
          - Build successful

          Generated by Codegen.com with Claude AI
          EOF

          git commit -F commit-msg.txt

      - name: Push changes and create PR
        if: steps.apply.outputs.changes_made == 'true' && steps.validate.outputs.validation_passed == 'true'
        id: create-pr
        run: |
          BRANCH_NAME="${{ github.event.client_payload.branch_name || format('auto-fix-{0}', github.run_id) }}"
          PR_NUMBER="${{ github.event.client_payload.pr_number || github.event.inputs.pr_number }}"

          # Push the branch
          git push origin HEAD:$BRANCH_NAME

          # Create PR using gh CLI
          PR_BODY=$(cat << 'EOF'
          ## 🤖 Automated Fix PR

          This PR contains automated fixes for issues identified by CodeRabbit in PR #${{ github.event.client_payload.pr_number || github.event.inputs.pr_number }}.

          ### Issues Fixed
          ${{ steps.categorize.outputs.categorized }}

          ### Validation Results
          - ✅ All tests passing
          - ✅ Linting checks passed
          - ✅ Build successful

          ### Safety Checks
          - No breaking changes detected
          - Code coverage maintained/improved
          - No new security vulnerabilities introduced

          ### Review Instructions
          1. Review each fix carefully
          2. Verify the fixes address the original issues
          3. Check for any unintended side effects
          4. Approve and merge if satisfied

          ---
          *Generated by Codegen.com with Claude AI assistance*
          EOF
          )

          gh pr create \
            --title "fix: Auto-fix for PR #$PR_NUMBER CodeRabbit issues" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME \
            --label "auto-fix,needs-review"

      - name: Handle validation failure
        if: steps.apply.outputs.changes_made == 'true' && steps.validate.outputs.validation_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.client_payload.pr_number || github.event.inputs.pr_number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ⚠️ Auto-Fix Validation Failed

              The automated fixes were generated but failed validation checks.

              ### Failed Checks:
              - See workflow logs for details

              ### Manual Intervention Required
              The issues identified by CodeRabbit require manual review and fixing.

              You can view the attempted fixes in the workflow artifacts.`
            });

      - name: Update learning database
        if: always()
        continue-on-error: true
        run: |
          # Log the outcome for learning
          OUTCOME="${{ steps.validate.outputs.validation_passed }}"
          ISSUES='${{ steps.categorize.outputs.categorized }}'

          # This would normally update a learning database
          # For now, we'll create a learning log file
          mkdir -p .codegen/learning

          cat > .codegen/learning/fix-log-${{ github.run_id }}.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "pr_number": "${{ github.event.client_payload.pr_number || github.event.inputs.pr_number }}",
            "issues": $ISSUES,
            "outcome": "$OUTCOME",
            "validation_passed": ${{ steps.validate.outputs.validation_passed || false }},
            "changes_made": ${{ steps.apply.outputs.changes_made || false }}
          }
          EOF