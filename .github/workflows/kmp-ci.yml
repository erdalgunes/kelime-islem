name: KMP CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      full_build:
        description: 'Run full platform builds'
        required: false
        default: false
        type: boolean

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # ============================================
  # DETERMINE BUILD SCOPE
  # ============================================
  determine-scope:
    name: Determine Build Scope
    runs-on: ubuntu-latest
    outputs:
      build_scope: ${{ steps.scope.outputs.scope }}
      should_deploy: ${{ steps.scope.outputs.deploy }}
      platforms: ${{ steps.scope.outputs.platforms }}

    steps:
    - name: Determine build scope based on branch
      id: scope
      run: |
        BRANCH="${{ github.ref_name }}"
        FULL_BUILD="${{ github.event.inputs.full_build }}"

        # Feature branches - minimal builds
        if [[ "$BRANCH" == feature/* ]]; then
          echo "scope=minimal" >> $GITHUB_OUTPUT
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\"]" >> $GITHUB_OUTPUT

        # Develop branch - full builds, deploy to dev
        elif [[ "$BRANCH" == "develop" ]]; then
          echo "scope=full" >> $GITHUB_OUTPUT
          echo "deploy=dev" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\", \"android\", \"ios\", \"desktop\", \"web\"]" >> $GITHUB_OUTPUT

        # Release/Hotfix branches - full builds, deploy to staging
        elif [[ "$BRANCH" == release/* ]] || [[ "$BRANCH" == hotfix/* ]]; then
          echo "scope=full" >> $GITHUB_OUTPUT
          echo "deploy=staging" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\", \"android\", \"ios\", \"desktop\", \"web\"]" >> $GITHUB_OUTPUT

        # Main branch - validation only, no deployment
        elif [[ "$BRANCH" == "main" ]]; then
          echo "scope=validation" >> $GITHUB_OUTPUT
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\", \"android\", \"desktop\"]" >> $GITHUB_OUTPUT

        # Pull requests - moderate builds
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "scope=moderate" >> $GITHUB_OUTPUT
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\", \"android\"]" >> $GITHUB_OUTPUT

        # Manual trigger with full_build flag
        elif [[ "$FULL_BUILD" == "true" ]]; then
          echo "scope=full" >> $GITHUB_OUTPUT
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\", \"android\", \"ios\", \"desktop\", \"web\"]" >> $GITHUB_OUTPUT

        # Default - minimal builds
        else
          echo "scope=minimal" >> $GITHUB_OUTPUT
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "platforms=[\"jvm\"]" >> $GITHUB_OUTPUT
        fi

        echo "Branch: $BRANCH"
        echo "Build scope determined"

  # ============================================
  # LINT AND CODE QUALITY
  # ============================================
  lint-and-analysis:
    name: Code Quality & Analysis
    runs-on: ubuntu-latest
    needs: determine-scope

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: ${{ github.ref != 'refs/heads/develop' }}

    - name: Run Detekt
      run: ./gradlew detekt

    - name: Upload Detekt Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: detekt-report
        path: build/reports/detekt/

    # Skip expensive checks for feature branches
    - name: Run Code Coverage
      if: needs.determine-scope.outputs.build_scope != 'minimal'
      run: ./gradlew koverVerify

    - name: Upload Coverage Report
      if: always() && needs.determine-scope.outputs.build_scope != 'minimal'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/reports/kover/

  # ============================================
  # PLATFORM BUILDS (MATRIX)
  # ============================================
  build-platforms:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [determine-scope, lint-and-analysis]
    if: needs.determine-scope.outputs.build_scope != 'skip'

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: jvm
            os: ubuntu-latest
            task: :composeApp:jvmTest

          - platform: android
            os: ubuntu-latest
            task: :composeApp:testDebugUnitTest

          - platform: ios
            os: macos-latest
            task: :composeApp:iosSimulatorArm64Test

          - platform: desktop
            os: ubuntu-latest
            task: :composeApp:desktopTest

          - platform: web
            os: ubuntu-latest
            task: :composeApp:wasmJsTest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false

    # Only run if platform is in the build scope
    - name: Check if platform should be built
      id: should_build
      run: |
        PLATFORMS='${{ needs.determine-scope.outputs.platforms }}'
        if echo "$PLATFORMS" | grep -q '"${{ matrix.platform }}"'; then
          echo "build=true" >> $GITHUB_OUTPUT
        else
          echo "build=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and Test ${{ matrix.platform }}
      if: steps.should_build.outputs.build == 'true'
      run: |
        echo "Building for ${{ matrix.platform }}..."
        ./gradlew ${{ matrix.task }}

    - name: Skip ${{ matrix.platform }} (not in scope)
      if: steps.should_build.outputs.build == 'false'
      run: echo "Skipping ${{ matrix.platform }} - not required for this branch"

    - name: Upload Test Results
      if: always() && steps.should_build.outputs.build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          **/build/test-results/
          **/build/reports/tests/

  # ============================================
  # DEPLOYMENT (ENVIRONMENT-SPECIFIC)
  # ============================================
  deploy:
    name: Deploy to ${{ needs.determine-scope.outputs.should_deploy }}
    runs-on: ubuntu-latest
    needs: [determine-scope, build-platforms]
    if: needs.determine-scope.outputs.should_deploy != 'false' && github.event_name == 'push'
    environment: ${{ needs.determine-scope.outputs.should_deploy }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false

    - name: Build Release Artifacts
      run: |
        if [[ "${{ needs.determine-scope.outputs.should_deploy }}" == "dev" ]]; then
          echo "Building development artifacts..."
          ./gradlew assembleDebug
        elif [[ "${{ needs.determine-scope.outputs.should_deploy }}" == "staging" ]]; then
          echo "Building staging artifacts..."
          ./gradlew assembleRelease
        fi

    - name: Deploy to Environment
      run: |
        ENVIRONMENT="${{ needs.determine-scope.outputs.should_deploy }}"
        echo "Deploying to $ENVIRONMENT environment..."
        # Add actual deployment commands here
        # Examples:
        # - Firebase App Distribution for mobile
        # - Vercel/Netlify for web
        # - GitHub Packages for libraries

    - name: Notify Deployment
      if: always()
      run: |
        echo "Deployment to ${{ needs.determine-scope.outputs.should_deploy }} completed"
        # Add Slack/Discord notifications here if needed

  # ============================================
  # FINAL STATUS CHECK
  # ============================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-analysis, build-platforms]
    if: always()

    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.lint-and-analysis.result }}" == "failure" ]] ||
           [[ "${{ needs.build-platforms.result }}" == "failure" ]]; then
          echo "CI failed! Check the logs above."
          exit 1
        else
          echo "CI passed successfully!"
        fi

    - name: Add CI Status Comment (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const status = '${{ needs.build-platforms.result }}' === 'success' ? '✅' : '❌';
          const body = `## CI Build Status: ${status}

          - Lint & Analysis: ${{ needs.lint-and-analysis.result }}
          - Platform Builds: ${{ needs.build-platforms.result }}

          View the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;

          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body
          });