name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read          # Required to checkout code
  actions: read          # Required to access workflow artifacts
  checks: write          # Required to create check runs
  security-events: write # Required for security scanning results
  pull-requests: read    # Required for PR context

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Gradle environment
      uses: ./.github/actions/setup-gradle
    
    - name: Run tests with coverage
      run: |
        echo "üß™ Running unit tests and generating coverage report..."
        ./gradlew :composeApp:testDebugUnitTest koverXmlReport --build-cache --parallel || {
          echo "‚ùå Tests failed! Check the test results below."
          exit 1
        }
        echo "‚úÖ Tests completed successfully"
    
    - name: Run Android Lint
      run: |
        echo "üîç Running Android Lint analysis..."
        ./gradlew :composeApp:lintDebug --build-cache --continue || {
          echo "‚ö†Ô∏è  Lint issues found. Check the lint report."
          echo "Continuing with build as lint issues are non-blocking."
        }
        echo "‚úÖ Lint analysis completed"
    
    - name: Verify coverage report exists
      run: |
        COVERAGE_FILE="./composeApp/build/reports/kover/report.xml"
        if [ ! -f "$COVERAGE_FILE" ]; then
          echo "‚ùå Coverage report not found at $COVERAGE_FILE"
          echo "Available kover reports:"
          find ./composeApp/build/reports/kover/ -name "*.xml" || true
          exit 1
        fi
        echo "‚úÖ Coverage report found at $COVERAGE_FILE"
    
    - name: SonarCloud Analysis
      if: ${{ secrets.SONAR_TOKEN != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "üìä Running SonarCloud analysis..."
        ./gradlew sonar --info --build-cache || {
          echo "‚ùå SonarCloud analysis failed!"
          echo "Check SonarCloud configuration and token validity."
          exit 1
        }
        echo "‚úÖ SonarCloud analysis completed successfully"
    
    # Only upload to CodeCov if token is available (optional)
    - name: Upload coverage to Codecov
      if: ${{ secrets.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./composeApp/build/reports/kover/report.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          composeApp/build/reports/tests/testDebugUnitTest/
          composeApp/build/test-results/testDebugUnitTest/
        retention-days: 7
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          composeApp/build/reports/kover/
        retention-days: 7
    
    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: |
          composeApp/build/reports/lint-results-*.html
          composeApp/build/reports/lint-results-*.xml
        retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}
    
    strategy:
      matrix:
        target: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Gradle environment
      uses: ./.github/actions/setup-gradle
    
    - name: Generate SBOM
      run: |
        echo "üìã Generating Software Bill of Materials..."
        ./gradlew cyclonedxBom --build-cache || {
          echo "‚ö†Ô∏è  SBOM generation failed, continuing build"
          echo "This is non-critical for the build process"
        }
        echo "‚úÖ SBOM generation completed"
    
    - name: Build ${{ matrix.target }} APK
      run: |
        echo "üî® Building ${{ matrix.target }} APK..."
        ./gradlew assemble${{ matrix.target == 'debug' && 'Debug' || 'Release' }} --build-cache --parallel || {
          echo "‚ùå APK build failed!"
          exit 1
        }
        echo "‚úÖ APK build completed successfully"
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.7.0
      with:
        cosign-release: 'v2.4.1'
    
    - name: Sign APK with Cosign (keyless)
      if: matrix.target == 'release'
      run: |
        echo "üîê Signing release APK with Cosign..."
        APK_PATH="composeApp/build/outputs/apk/release/composeApp-release-unsigned.apk"
        if [ -f "$APK_PATH" ]; then
          cosign sign-blob --yes "$APK_PATH" --output-signature="${APK_PATH}.sig" --output-certificate="${APK_PATH}.pem"
          echo "‚úÖ APK signed successfully"
        else
          echo "‚ùå APK not found for signing at $APK_PATH"
          exit 1
        fi
    
    - name: Generate provenance attestation
      if: matrix.target == 'release'
      run: |
        echo "üìú Generating provenance attestation..."
        APK_PATH="composeApp/build/outputs/apk/release/composeApp-release-unsigned.apk"
        if [ -f "$APK_PATH" ]; then
          cosign attest --yes --predicate-type=https://slsa.dev/provenance/v0.2 \
            --predicate=<(echo '{"buildType":"https://github.com/actions","builder":{"id":"https://github.com/actions/runner"},"invocation":{"configSource":{"uri":"'$GITHUB_SERVER_URL'/'$GITHUB_REPOSITORY'","digest":{"sha1":"'$GITHUB_SHA'"}}}}') \
            "$APK_PATH"
          echo "‚úÖ Provenance attestation generated"
        fi
    
    - name: Upload ${{ matrix.target }} APK and signatures
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-apk-signed
        path: |
          composeApp/build/outputs/apk/${{ matrix.target }}/*.apk
          composeApp/build/outputs/apk/${{ matrix.target }}/*.sig
          composeApp/build/outputs/apk/${{ matrix.target }}/*.pem
          build/reports/kelime-islem-bom.xml
        retention-days: 7
        if-no-files-found: error