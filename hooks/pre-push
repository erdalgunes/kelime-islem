#!/bin/bash
# Optimized pre-push hook for Kelime ƒ∞≈ülem
# Fast CI simulation with parallel execution and time bounds

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
MAX_EXECUTION_TIME=300  # 5 minutes max
PARALLEL_JOBS=4
CACHE_DIR=".git/hooks-cache"
SKIP_CHECKS_FILE=".git/skip-checks"

# Progress tracking
TOTAL_STEPS=8
CURRENT_STEP=0

# Initialize timer
START_TIME=$(date +%s)

echo -e "${CYAN}üöÄ Running optimized pre-push validation...${NC}"
echo -e "${BLUE}‚è±Ô∏è  Max execution time: ${MAX_EXECUTION_TIME}s, Parallel jobs: ${PARALLEL_JOBS}${NC}"

# Function to check elapsed time
check_timeout() {
    local current_time=$(date +%s)
    local elapsed=$((current_time - START_TIME))
    if [ $elapsed -gt $MAX_EXECUTION_TIME ]; then
        echo -e "${RED}‚è∞ Timeout reached (${elapsed}s > ${MAX_EXECUTION_TIME}s)${NC}"
        echo -e "${YELLOW}üí° Consider running checks locally first or use --no-verify${NC}"
        exit 1
    fi
    echo -e "${CYAN}‚è±Ô∏è  Elapsed: ${elapsed}s${NC}"
}

# Function to update progress
update_progress() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    local percentage=$((CURRENT_STEP * 100 / TOTAL_STEPS))
    echo -e "${PURPLE}üìä Progress: $CURRENT_STEP/$TOTAL_STEPS (${percentage}%) - $1${NC}"
}

# Function to check if we should skip checks
should_skip_check() {
    local check_name=$1
    if [ -f "$SKIP_CHECKS_FILE" ] && grep -q "^$check_name$" "$SKIP_CHECKS_FILE"; then
        echo -e "${YELLOW}‚è≠Ô∏è  Skipping $check_name (found in .git/skip-checks)${NC}"
        return 0
    fi
    return 1
}

# Function to check if a Gradle task exists (cached)
check_gradle_task() {
    local task=$1
    local cache_file="$CACHE_DIR/gradle-tasks"

    # Create cache directory if it doesn't exist
    mkdir -p "$CACHE_DIR"

    # Update cache if it's older than 1 hour or doesn't exist
    if [ ! -f "$cache_file" ] || [ $(($(date +%s) - $(stat -f %m "$cache_file" 2>/dev/null || echo 0))) -gt 3600 ]; then
        echo -e "${BLUE}üîÑ Updating Gradle task cache...${NC}"
        ./gradlew tasks --all 2>/dev/null | grep "^[a-zA-Z]" > "$cache_file" || touch "$cache_file"
    fi

    grep -q "^$task " "$cache_file"
}

# Function to run tasks in parallel with timeout
run_parallel() {
    local tasks=("$@")
    local pids=()
    local results=()

    echo -e "${BLUE}üîÑ Running ${#tasks[@]} tasks in parallel...${NC}"

    # Start all tasks
    for i in "${!tasks[@]}"; do
        {
            eval "${tasks[$i]}"
            echo $? > "/tmp/task_result_$i"
        } &
        pids[$i]=$!
        echo -e "${CYAN}  Started task $((i+1)): ${tasks[$i]:0:50}...${NC}"
    done

    # Wait for all tasks with timeout checking
    for i in "${!pids[@]}"; do
        local timeout=60  # 60 seconds per task
        local count=0

        while [ $count -lt $timeout ]; do
            if ! kill -0 "${pids[$i]}" 2>/dev/null; then
                break
            fi
            sleep 1
            count=$((count + 1))
            check_timeout
        done

        # Kill task if still running
        if kill -0 "${pids[$i]}" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Task $((i+1)) timed out, terminating...${NC}"
            kill "${pids[$i]}" 2>/dev/null
            results[$i]=124  # timeout exit code
        else
            wait "${pids[$i]}"
            results[$i]=$(cat "/tmp/task_result_$i" 2>/dev/null || echo 1)
        fi

        rm -f "/tmp/task_result_$i"
    done

    # Check results
    local failed=0
    for i in "${!results[@]}"; do
        if [ "${results[$i]}" -ne 0 ]; then
            echo -e "${RED}‚ùå Task $((i+1)) failed with exit code ${results[$i]}${NC}"
            failed=1
        else
            echo -e "${GREEN}‚úÖ Task $((i+1)) completed successfully${NC}"
        fi
    done

    return $failed
}

# Create cache directory
mkdir -p "$CACHE_DIR"

# 1. VALIDATE WORKFLOW YAML SYNTAX
if ! should_skip_check "yaml-validation"; then
    update_progress "Validating YAML syntax"

    for workflow in .github/workflows/*.yml; do
        if [ -f "$workflow" ]; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$workflow'))" 2>/dev/null; then
                echo -e "${RED}‚ùå Invalid YAML in $workflow${NC}"
                exit 1
            fi
        fi
    done

    echo -e "${GREEN}‚úÖ YAML validation passed${NC}"
    check_timeout
fi

# 2. VALIDATE GRADLE TASKS IN WORKFLOWS
if ! should_skip_check "gradle-tasks"; then
    update_progress "Validating Gradle tasks"

    WORKFLOW_TASKS=$(grep -h "gradlew" .github/workflows/*.yml 2>/dev/null | \
        grep -oE "gradlew\s+[a-zA-Z:]+(\s|$)" | \
        sed 's/gradlew\s*//' | \
        sed 's/\s*$//' | \
        tr -d '\r' | \
        sort -u || true)

    INVALID_TASKS=""
    for task in $WORKFLOW_TASKS; do
        # Skip flags and options
        if [[ "$task" == --* ]] || [[ "$task" == -* ]]; then
            continue
        fi

        if ! check_gradle_task "$task" 2>/dev/null; then
            INVALID_TASKS="$INVALID_TASKS $task"
        fi
    done

    if [ -n "$INVALID_TASKS" ]; then
        echo -e "${RED}‚ùå Invalid Gradle tasks found in workflows:${NC}"
        echo "  $INVALID_TASKS"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Gradle task validation passed${NC}"
    check_timeout
fi

# 3. CHECK FOR UNSUPPORTED PLATFORMS
if ! should_skip_check "platform-check"; then
    update_progress "Checking platform compatibility"

    UNSUPPORTED_PATTERNS="testDesktopJvm|iosX64Test|iosSimulatorArm64Test|packageDistributionForCurrentOS"
    if grep -rE "$UNSUPPORTED_PATTERNS" .github/workflows/ --include="*.yml" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Found references to unsupported platforms in workflows!${NC}"
        echo "  This project only supports Android and JS/Web."
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Platform compatibility check passed${NC}"
    check_timeout
fi

# 4. PARALLEL LINTING AND BASIC CHECKS
if ! should_skip_check "lint-checks"; then
    update_progress "Running linting checks in parallel"

    # Prepare parallel tasks
    parallel_tasks=()

    # Add lint task if available
    if check_gradle_task "lint"; then
        parallel_tasks+=("./gradlew lint --continue > /tmp/lint_result 2>&1")
    fi

    # Add detekt task if available
    if check_gradle_task "detekt"; then
        parallel_tasks+=("./gradlew detekt --continue > /tmp/detekt_result 2>&1")
    fi

    # Add ktlint-like checks via spotless if available
    if check_gradle_task "spotlessCheck"; then
        parallel_tasks+=("./gradlew spotlessCheck --continue > /tmp/spotless_result 2>&1")
    fi

    # Check merge conflicts
    parallel_tasks+=("! grep -r '^<<<<<<<\\|^=======$\\|^>>>>>>>' . --exclude-dir=.git > /dev/null 2>&1")

    if [ ${#parallel_tasks[@]} -gt 0 ]; then
        if ! run_parallel "${parallel_tasks[@]}"; then
            echo -e "${RED}‚ùå Some linting checks failed!${NC}"

            # Show relevant error outputs
            if [ -f "/tmp/lint_result" ]; then
                echo -e "${YELLOW}Lint output:${NC}"
                tail -20 /tmp/lint_result
            fi
            if [ -f "/tmp/detekt_result" ]; then
                echo -e "${YELLOW}Detekt output:${NC}"
                tail -20 /tmp/detekt_result
            fi
            if [ -f "/tmp/spotless_result" ]; then
                echo -e "${YELLOW}Spotless output:${NC}"
                tail -20 /tmp/spotless_result
            fi

            # Clean up temp files
            rm -f /tmp/*_result
            exit 1
        fi

        # Clean up temp files
        rm -f /tmp/*_result
    fi

    echo -e "${GREEN}‚úÖ Linting checks passed${NC}"
    check_timeout
fi

# 5. PARALLEL COMPILATION CHECKS
if ! should_skip_check "compilation"; then
    update_progress "Running compilation checks in parallel"

    compilation_tasks=()

    # Android compilation
    if check_gradle_task "compileDebugKotlinAndroid"; then
        compilation_tasks+=("./gradlew compileDebugKotlinAndroid --continue > /tmp/android_compile 2>&1")
    fi

    # JS compilation
    if check_gradle_task "compileKotlinJs"; then
        compilation_tasks+=("./gradlew compileKotlinJs --continue > /tmp/js_compile 2>&1")
    fi

    # Common compilation
    if check_gradle_task "compileCommonMainKotlinMetadata"; then
        compilation_tasks+=("./gradlew compileCommonMainKotlinMetadata --continue > /tmp/common_compile 2>&1")
    fi

    if [ ${#compilation_tasks[@]} -gt 0 ]; then
        if ! run_parallel "${compilation_tasks[@]}"; then
            echo -e "${RED}‚ùå Compilation failed!${NC}"

            # Show compilation errors
            for result_file in /tmp/*_compile; do
                if [ -f "$result_file" ]; then
                    echo -e "${YELLOW}$(basename "$result_file" | sed 's/_compile//')${NC} compilation output:"
                    tail -20 "$result_file"
                fi
            done

            rm -f /tmp/*_compile
            exit 1
        fi

        rm -f /tmp/*_compile
    fi

    echo -e "${GREEN}‚úÖ Compilation checks passed${NC}"
    check_timeout
fi

# 6. QUICK UNIT TESTS (PARALLEL)
if ! should_skip_check "unit-tests"; then
    update_progress "Running unit tests in parallel"

    test_tasks=()

    # Android unit tests
    if check_gradle_task "testDebugUnitTest"; then
        test_tasks+=("./gradlew testDebugUnitTest --continue > /tmp/android_test 2>&1")
    fi

    # JS tests
    if check_gradle_task "jsTest"; then
        test_tasks+=("./gradlew jsTest --continue > /tmp/js_test 2>&1")
    fi

    # Common tests
    if check_gradle_task "allTests"; then
        test_tasks+=("./gradlew allTests --continue > /tmp/common_test 2>&1")
    fi

    if [ ${#test_tasks[@]} -gt 0 ]; then
        if ! run_parallel "${test_tasks[@]}"; then
            echo -e "${RED}‚ùå Unit tests failed!${NC}"

            # Show test failures
            for result_file in /tmp/*_test; do
                if [ -f "$result_file" ]; then
                    echo -e "${YELLOW}$(basename "$result_file" | sed 's/_test//')${NC} test output:"
                    grep -A 5 -B 5 "FAILED\|ERROR" "$result_file" | tail -20
                fi
            done

            rm -f /tmp/*_test
            exit 1
        fi

        rm -f /tmp/*_test
    fi

    echo -e "${GREEN}‚úÖ Unit tests passed${NC}"
    check_timeout
fi

# 7. VALIDATE REQUIRED FILES
if ! should_skip_check "required-files"; then
    update_progress "Checking required files"

    REQUIRED_FILES=(
        ".github/workflows/kmp-ci.yml"
        "gradlew"
        "settings.gradle.kts"
        "build.gradle.kts"
    )

    for file in "${REQUIRED_FILES[@]}"; do
        if [ ! -f "$file" ]; then
            echo -e "${RED}‚ùå Required file missing: $file${NC}"
            exit 1
        fi
    done

    echo -e "${GREEN}‚úÖ Required files check passed${NC}"
    check_timeout
fi

# 8. COMMIT ANALYSIS AND SPRINT INTEGRATION
if ! should_skip_check "commit-analysis"; then
    update_progress "Analyzing commits and sprint integration"

    # Get commits not in origin
    COMMITS=$(git log origin/$(git rev-parse --abbrev-ref HEAD)..HEAD --oneline 2>/dev/null || git log -5 --oneline)
    COMMIT_COUNT=$(echo "$COMMITS" | wc -l | tr -d ' ')

    # Check for WIP commits
    if echo "$COMMITS" | grep -E "^[a-f0-9]+ (WIP|wip|temp|TEMP)" > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found WIP/temp commits${NC}"
    fi

    # Extract sprint references
    SPRINT_REFS=$(echo "$COMMITS" | grep -oE "(USTAD-[0-9]+|#[0-9]+)" | sort -u || true)
    if [ -n "$SPRINT_REFS" ]; then
        echo -e "${BLUE}üìä Sprint references found: $(echo "$SPRINT_REFS" | tr '\n' ', ' | sed 's/,$//')${NC}"
    fi

    # Basic commit message quality
    BAD_COMMITS=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ .{1,10}$" || true)
    if [ -n "$BAD_COMMITS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Short commit messages found:${NC}"
        echo "$BAD_COMMITS" | head -3
    fi

    echo -e "${GREEN}‚úÖ Commit analysis completed (${COMMIT_COUNT} commits)${NC}"
    check_timeout
fi

# Final summary
END_TIME=$(date +%s)
TOTAL_TIME=$((END_TIME - START_TIME))

echo ""
echo -e "${GREEN}üéâ All pre-push validations passed!${NC}"
echo -e "${BLUE}‚è±Ô∏è  Total execution time: ${TOTAL_TIME}s (limit: ${MAX_EXECUTION_TIME}s)${NC}"
echo -e "${PURPLE}üìä Completed ${TOTAL_STEPS} validation steps${NC}"

# Performance tracking
echo -e "${CYAN}üí° Performance: $((TOTAL_TIME * 100 / MAX_EXECUTION_TIME))% of time limit used${NC}"

# Save performance data for optimization
echo "$(date +%Y-%m-%d): ${TOTAL_TIME}s" >> "$CACHE_DIR/performance.log"

echo ""
echo -e "${GREEN}‚úÖ Your changes are ready to push to GitHub!${NC}"
echo -e "${YELLOW}üîß To skip checks: create .git/skip-checks or use --no-verify${NC}"

exit 0