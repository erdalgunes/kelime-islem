#!/bin/bash
# Enhanced pre-commit hook for Kelime ƒ∞≈ülem
# Fast validation with comprehensive quality checks (<30 seconds)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
MAX_FILE_SIZE_MB=5
MAX_COMPLEXITY_SCORE=15
ENABLE_AUTO_FIX=true
SKIP_CHECKS_FILE=".git/skip-checks"

echo -e "${BLUE}üîç Running enhanced pre-commit checks...${NC}"

# Function to check if we should skip checks
should_skip_check() {
    local check_name=$1
    if [ -f "$SKIP_CHECKS_FILE" ] && grep -q "^$check_name$" "$SKIP_CHECKS_FILE"; then
        echo -e "${YELLOW}‚è≠Ô∏è  Skipping $check_name (found in .git/skip-checks)${NC}"
        return 0
    fi
    return 1
}

# Function to log skipped check for audit
log_skip() {
    local check_name=$1
    local reason=$2
    echo "$(date): $check_name skipped - $reason" >> .git/hooks.log
}

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No staged files to check${NC}"
    exit 0
fi

# Filter file types for efficient processing
KOTLIN_FILES=$(echo "$STAGED_FILES" | grep "\.kt$" || true)
YAML_FILES=$(echo "$STAGED_FILES" | grep -E "\.(yml|yaml)$" || true)
WORKFLOW_FILES=$(echo "$STAGED_FILES" | grep "\.github/workflows/.*\.yml" || true)
GRADLE_FILES=$(echo "$STAGED_FILES" | grep -E "\.(gradle|gradle\.kts)$" || true)

# 1. SECURITY SCANNING
if ! should_skip_check "security"; then
    echo -e "${PURPLE}üîí Security scanning...${NC}"

    # Check for secrets/API keys
    SECRET_PATTERNS="(api[_-]?key|password|secret|token|credential|auth[_-]?token)"
    if git diff --cached | grep -iE "$SECRET_PATTERNS" > /dev/null; then
        echo -e "${RED}‚ùå Potential secrets detected in staged changes!${NC}"
        echo "  Review these patterns: api_key, password, secret, token, credential"
        echo "  Use 'git commit --no-verify' to bypass (will be logged)"
        exit 1
    fi

    # Check for hardcoded URLs/IPs
    if git diff --cached | grep -E "https?://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Hardcoded IP addresses found${NC}"
    fi

    echo "    ‚úì Security scan passed"
fi

# 2. PLATFORM VALIDATION
if ! should_skip_check "platform"; then
    echo -e "${BLUE}üéØ Platform compatibility check...${NC}"

    # Check for unsupported KMP targets
    UNSUPPORTED_PATTERNS="testDesktopJvm|iosX64Test|iosSimulatorArm64Test|packageDistributionForCurrentOS"
    if git diff --cached | grep -E "$UNSUPPORTED_PATTERNS" > /dev/null; then
        echo -e "${RED}‚ùå Error: Unsupported platform references found!${NC}"
        echo "  This project only supports Android and JS/Web targets."
        echo "  Remove references to Desktop or iOS tests."
        exit 1
    fi

    echo "    ‚úì Platform validation passed"
fi

# 3. KOTLIN LINTING & FORMATTING
if [ -n "$KOTLIN_FILES" ] && ! should_skip_check "kotlin-lint"; then
    echo -e "${PURPLE}üìù Kotlin linting and formatting...${NC}"

    # Check if Gradle wrapper exists
    if [ ! -f "./gradlew" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Gradle wrapper not found, skipping detekt${NC}"
    # Check if Detekt is available
    elif ./gradlew tasks --all 2>/dev/null | grep -q "detekt "; then
        echo "    Running Detekt static analysis..."

        # Create temp config for staged files only
        TEMP_DETEKT_CONFIG=$(mktemp)
        # Ensure cleanup on exit
        trap 'rm -f "$TEMP_DETEKT_CONFIG"' EXIT
        cat > "$TEMP_DETEKT_CONFIG" << EOF
detekt:
  input: $(echo "$KOTLIN_FILES" | tr '\n' ',' | sed 's/,$//')
  reports:
    txt:
      active: true
  excludes: "**/build/**,**/generated/**"
EOF

        # Run Detekt on staged files only
        if ! ./gradlew detekt --config-file="$TEMP_DETEKT_CONFIG" --continue > /tmp/detekt-result 2>&1; then
            echo -e "${RED}‚ùå Detekt found issues:${NC}"
            cat /tmp/detekt-result | grep -E "(error|warning)" | head -10
            rm -f "$TEMP_DETEKT_CONFIG" /tmp/detekt-result
            echo "  Run './gradlew detekt' to see full report"
            exit 1
        fi
        rm -f "$TEMP_DETEKT_CONFIG" /tmp/detekt-result
    fi

    # Basic formatting checks
    for file in $KOTLIN_FILES; do
        if [ -f "$file" ]; then
            # Check for tabs (Kotlin style guide prefers spaces)
            if grep -q $'\t' "$file"; then
                if [ "$ENABLE_AUTO_FIX" = true ]; then
                    echo "    Auto-fixing tabs in $file"
                    # Cross-platform sed for tab replacement
                    if [[ "$OSTYPE" == "darwin"* ]]; then
                        sed -i '' 's/\t/    /g' "$file"
                    else
                        sed -i 's/\t/    /g' "$file"
                    fi
                    git add "$file"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found tabs in $file (use spaces)${NC}"
                fi
            fi

            # Check for trailing whitespace
            if grep -q " $" "$file"; then
                if [ "$ENABLE_AUTO_FIX" = true ]; then
                    echo "    Auto-fixing trailing whitespace in $file"
                    # Cross-platform sed for trailing whitespace
                    if [[ "$OSTYPE" == "darwin"* ]]; then
                        sed -i '' 's/[[:space:]]*$//' "$file"
                    else
                        sed -i 's/[[:space:]]*$//' "$file"
                    fi
                    git add "$file"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Trailing whitespace in $file${NC}"
                fi
            fi

            # Check for missing newline at end of file
            if [ -n "$(tail -c1 "$file")" ]; then
                if [ "$ENABLE_AUTO_FIX" = true ]; then
                    echo "    Adding newline to end of $file"
                    echo >> "$file"
                    git add "$file"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Missing newline at end of $file${NC}"
                fi
            fi
        fi
    done

    echo "    ‚úì Kotlin linting passed"
fi

# 4. COMPOSE-SPECIFIC CHECKS
if [ -n "$KOTLIN_FILES" ] && ! should_skip_check "compose"; then
    echo -e "${BLUE}üé® Compose validation...${NC}"

    # Check for @Preview without imports
    for file in $KOTLIN_FILES; do
        if [ -f "$file" ] && grep -q "@Preview" "$file"; then
            if ! grep -q "import.*Preview" "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  @Preview annotation found without import in $file${NC}"
            fi
        fi
    done

    # Check for composable complexity (too many parameters)
    for file in $KOTLIN_FILES; do
        if [ -f "$file" ]; then
            # Count parameters in @Composable functions
            COMPLEX_COMPOSABLES=$(grep -n "@Composable" "$file" | while read line; do
                line_num=$(echo "$line" | cut -d: -f1)
                # Simple heuristic: count commas in function signature
                func_line=$(sed -n "${line_num},/^{/p" "$file" | tr '\n' ' ')
                param_count=$(echo "$func_line" | grep -o "," | wc -l | tr -d ' ')
                if [ "$param_count" -gt 8 ]; then
                    echo "$file:$line_num has $param_count parameters (consider refactoring)"
                fi
            done)

            if [ -n "$COMPLEX_COMPOSABLES" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Complex composables found:${NC}"
                echo "$COMPLEX_COMPOSABLES"
            fi
        fi
    done

    echo "    ‚úì Compose validation passed"
fi

# 5. YAML VALIDATION
if [ -n "$YAML_FILES" ] && ! should_skip_check "yaml"; then
    echo -e "${BLUE}üìÑ YAML syntax validation...${NC}"

    for file in $YAML_FILES; do
        if [ -f "$file" ]; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo -e "${RED}‚ùå Error: Invalid YAML syntax in $file${NC}"
                exit 1
            fi
        fi
    done

    echo "    ‚úì YAML validation passed"
fi

# 6. WORKFLOW VALIDATION
if [ -n "$WORKFLOW_FILES" ] && ! should_skip_check "workflows"; then
    echo -e "${BLUE}‚öôÔ∏è  GitHub workflow validation...${NC}"

    # Check for non-existent Gradle tasks
    if git diff --cached | grep -E "gradlew (detekt|ktlintCheck)" > /dev/null; then
        echo -e "${RED}‚ùå Error: Invalid Gradle tasks in workflow!${NC}"
        echo "  - 'detekt' task doesn't exist (use 'detekt' with proper config)"
        echo "  - 'ktlintCheck' task doesn't exist"
        exit 1
    fi

    echo "    ‚úì Workflow validation passed"
fi

# 7. COMMIT MESSAGE VALIDATION
if ! should_skip_check "commit-msg"; then
    echo -e "${PURPLE}üí¨ Commit message validation...${NC}"

    # Get commit message from git's commit message editor
    if [ -f ".git/COMMIT_EDITMSG" ]; then
        COMMIT_MSG=$(head -1 .git/COMMIT_EDITMSG 2>/dev/null || echo "")

        # Check conventional commit format
        if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|perf|build)(\(.+\))?: .{3,}"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Commit message doesn't follow conventional format${NC}"
            echo "  Expected: type(scope): description"
            echo "  Examples: feat: add user login, fix(ui): button alignment"
        fi

        # Check for sprint ticket references (optional)
        if ! echo "$COMMIT_MSG" | grep -qE "(USTAD-[0-9]+|#[0-9]+)"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Consider adding issue/ticket reference${NC}"
        fi
    fi

    echo "    ‚úì Commit message check completed"
fi

# 8. FILE SIZE CHECK
if ! should_skip_check "file-size"; then
    echo -e "${BLUE}üìä File size validation...${NC}"

    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            size=$(wc -c < "$file")
            size_mb=$((size / 1024 / 1024))
            if [ $size_mb -gt $MAX_FILE_SIZE_MB ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Large file $file (${size_mb}MB > ${MAX_FILE_SIZE_MB}MB)${NC}"
                echo "  Consider using Git LFS for large assets"
            fi
        fi
    done

    echo "    ‚úì File size check passed"
fi

# 9. DEBUG STATEMENT CHECK
if ! should_skip_check "debug"; then
    echo -e "${BLUE}üêõ Debug statement check...${NC}"

    DEBUG_PATTERNS="println\(|console\.log\(|Log\.[dviwe]\(|TODO\(|FIXME\("
    if git diff --cached | grep -E "$DEBUG_PATTERNS" > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Debug statements or TODOs found${NC}"
        echo "  Consider removing println(), console.log(), Log.d(), TODOs before committing"
    fi

    echo "    ‚úì Debug statement check completed"
fi

# 10. QUICK BUILD CHECK (optional, can be heavy)
if [ "$QUICK_BUILD_CHECK" = "true" ] && ! should_skip_check "build"; then
    echo -e "${PURPLE}üî® Quick build validation...${NC}"

    # Ensure gradlew exists before build check
    if [ ! -f "./gradlew" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Gradle wrapper not found, skipping build check${NC}"
    elif ! ./gradlew compileDebugKotlinAndroid compileKotlinJs --continue > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Build compilation failed!${NC}"
        echo "  Run './gradlew build' to see detailed errors"
        exit 1
    else
        echo "    ‚úì Build validation passed"
    fi
fi

# Summary
echo ""
echo -e "${GREEN}‚úÖ Enhanced pre-commit checks completed successfully!${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  Checked: $(echo "$STAGED_FILES" | wc -l | tr -d ' ') files${NC}"

# Show skip instructions
echo ""
echo -e "${YELLOW}üí° Tip: To skip specific checks, create .git/skip-checks with check names:${NC}"
echo "  echo 'security' >> .git/skip-checks"
echo "  echo 'kotlin-lint' >> .git/skip-checks"
echo ""
echo -e "${YELLOW}üö® To skip all checks: git commit --no-verify (will be logged)${NC}"

exit 0